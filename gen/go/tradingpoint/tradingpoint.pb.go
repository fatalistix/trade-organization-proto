// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.25.3
// source: tradingpoint/tradingpoint.proto

package tradingpoint

import (
	core "github.com/fatalistix/trade-organization-proto/gen/go/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradingPointType int32

const (
	TradingPointType_TRADING_POINT_STORE            TradingPointType = 0
	TradingPointType_TRADING_POINT_DEPARTMENT_STORE TradingPointType = 1
	TradingPointType_TRADING_POINT_KIOSK            TradingPointType = 2
	TradingPointType_TRADING_POINT_TRAY             TradingPointType = 3
)

// Enum value maps for TradingPointType.
var (
	TradingPointType_name = map[int32]string{
		0: "TRADING_POINT_STORE",
		1: "TRADING_POINT_DEPARTMENT_STORE",
		2: "TRADING_POINT_KIOSK",
		3: "TRADING_POINT_TRAY",
	}
	TradingPointType_value = map[string]int32{
		"TRADING_POINT_STORE":            0,
		"TRADING_POINT_DEPARTMENT_STORE": 1,
		"TRADING_POINT_KIOSK":            2,
		"TRADING_POINT_TRAY":             3,
	}
)

func (x TradingPointType) Enum() *TradingPointType {
	p := new(TradingPointType)
	*p = x
	return p
}

func (x TradingPointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingPointType) Descriptor() protoreflect.EnumDescriptor {
	return file_tradingpoint_tradingpoint_proto_enumTypes[0].Descriptor()
}

func (TradingPointType) Type() protoreflect.EnumType {
	return &file_tradingpoint_tradingpoint_proto_enumTypes[0]
}

func (x TradingPointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradingPointType.Descriptor instead.
func (TradingPointType) EnumDescriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{0}
}

type PlaceOfWorkType int32

const (
	PlaceOfWorkType_PLACE_OF_WORK_HALL  PlaceOfWorkType = 0
	PlaceOfWorkType_PLACE_OF_WORK_KIOSK PlaceOfWorkType = 1
	PlaceOfWorkType_PLACE_OF_WORK_TRAY  PlaceOfWorkType = 2
)

// Enum value maps for PlaceOfWorkType.
var (
	PlaceOfWorkType_name = map[int32]string{
		0: "PLACE_OF_WORK_HALL",
		1: "PLACE_OF_WORK_KIOSK",
		2: "PLACE_OF_WORK_TRAY",
	}
	PlaceOfWorkType_value = map[string]int32{
		"PLACE_OF_WORK_HALL":  0,
		"PLACE_OF_WORK_KIOSK": 1,
		"PLACE_OF_WORK_TRAY":  2,
	}
)

func (x PlaceOfWorkType) Enum() *PlaceOfWorkType {
	p := new(PlaceOfWorkType)
	*p = x
	return p
}

func (x PlaceOfWorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceOfWorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_tradingpoint_tradingpoint_proto_enumTypes[1].Descriptor()
}

func (PlaceOfWorkType) Type() protoreflect.EnumType {
	return &file_tradingpoint_tradingpoint_proto_enumTypes[1]
}

func (x PlaceOfWorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceOfWorkType.Descriptor instead.
func (PlaceOfWorkType) EnumDescriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{1}
}

type HallContainerType int32

const (
	HallContainerType_HALL_CONTAINER_SECTION HallContainerType = 0
	HallContainerType_HALL_CONTAINER_STORE   HallContainerType = 1
)

// Enum value maps for HallContainerType.
var (
	HallContainerType_name = map[int32]string{
		0: "HALL_CONTAINER_SECTION",
		1: "HALL_CONTAINER_STORE",
	}
	HallContainerType_value = map[string]int32{
		"HALL_CONTAINER_SECTION": 0,
		"HALL_CONTAINER_STORE":   1,
	}
)

func (x HallContainerType) Enum() *HallContainerType {
	p := new(HallContainerType)
	*p = x
	return p
}

func (x HallContainerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HallContainerType) Descriptor() protoreflect.EnumDescriptor {
	return file_tradingpoint_tradingpoint_proto_enumTypes[2].Descriptor()
}

func (HallContainerType) Type() protoreflect.EnumType {
	return &file_tradingpoint_tradingpoint_proto_enumTypes[2]
}

func (x HallContainerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HallContainerType.Descriptor instead.
func (HallContainerType) EnumDescriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{2}
}

type ReceiptingPointWithAccountingType int32

const (
	ReceiptingPointWithAccountingType_RECEIPTING_POINT_WITH_ACCOUNTING_DEPARTMENT_STORE ReceiptingPointWithAccountingType = 0
	ReceiptingPointWithAccountingType_RECEIPTING_POINT_WITH_ACCOUNTING_STORE            ReceiptingPointWithAccountingType = 1
)

// Enum value maps for ReceiptingPointWithAccountingType.
var (
	ReceiptingPointWithAccountingType_name = map[int32]string{
		0: "RECEIPTING_POINT_WITH_ACCOUNTING_DEPARTMENT_STORE",
		1: "RECEIPTING_POINT_WITH_ACCOUNTING_STORE",
	}
	ReceiptingPointWithAccountingType_value = map[string]int32{
		"RECEIPTING_POINT_WITH_ACCOUNTING_DEPARTMENT_STORE": 0,
		"RECEIPTING_POINT_WITH_ACCOUNTING_STORE":            1,
	}
)

func (x ReceiptingPointWithAccountingType) Enum() *ReceiptingPointWithAccountingType {
	p := new(ReceiptingPointWithAccountingType)
	*p = x
	return p
}

func (x ReceiptingPointWithAccountingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiptingPointWithAccountingType) Descriptor() protoreflect.EnumDescriptor {
	return file_tradingpoint_tradingpoint_proto_enumTypes[3].Descriptor()
}

func (ReceiptingPointWithAccountingType) Type() protoreflect.EnumType {
	return &file_tradingpoint_tradingpoint_proto_enumTypes[3]
}

func (x ReceiptingPointWithAccountingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiptingPointWithAccountingType.Descriptor instead.
func (ReceiptingPointWithAccountingType) EnumDescriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{3}
}

type ReceiptingPointWithoutAccountingType int32

const (
	ReceiptingPointWithoutAccountingType_RECEIPTING_POINT_WITHOUT_ACCOUNTING_KIOSK ReceiptingPointWithoutAccountingType = 0
	ReceiptingPointWithoutAccountingType_RECEIPTING_POINT_WITHOUT_ACCOUNTING_TRAY  ReceiptingPointWithoutAccountingType = 1
)

// Enum value maps for ReceiptingPointWithoutAccountingType.
var (
	ReceiptingPointWithoutAccountingType_name = map[int32]string{
		0: "RECEIPTING_POINT_WITHOUT_ACCOUNTING_KIOSK",
		1: "RECEIPTING_POINT_WITHOUT_ACCOUNTING_TRAY",
	}
	ReceiptingPointWithoutAccountingType_value = map[string]int32{
		"RECEIPTING_POINT_WITHOUT_ACCOUNTING_KIOSK": 0,
		"RECEIPTING_POINT_WITHOUT_ACCOUNTING_TRAY":  1,
	}
)

func (x ReceiptingPointWithoutAccountingType) Enum() *ReceiptingPointWithoutAccountingType {
	p := new(ReceiptingPointWithoutAccountingType)
	*p = x
	return p
}

func (x ReceiptingPointWithoutAccountingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiptingPointWithoutAccountingType) Descriptor() protoreflect.EnumDescriptor {
	return file_tradingpoint_tradingpoint_proto_enumTypes[4].Descriptor()
}

func (ReceiptingPointWithoutAccountingType) Type() protoreflect.EnumType {
	return &file_tradingpoint_tradingpoint_proto_enumTypes[4]
}

func (x ReceiptingPointWithoutAccountingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiptingPointWithoutAccountingType.Descriptor instead.
func (ReceiptingPointWithoutAccountingType) EnumDescriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{4}
}

type TradingPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type         TradingPointType       `protobuf:"varint,2,opt,name=type,proto3,enum=tradingpoint.TradingPointType" json:"type,omitempty"`
	AreaPlot     float64                `protobuf:"fixed64,3,opt,name=area_plot,json=areaPlot,proto3" json:"area_plot,omitempty"`
	RentalCharge *core.Money            `protobuf:"bytes,4,opt,name=rental_charge,json=rentalCharge,proto3" json:"rental_charge,omitempty"`
	CounterCount int32                  `protobuf:"varint,5,opt,name=counter_count,json=counterCount,proto3" json:"counter_count,omitempty"`
	Address      string                 `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Products     []*ProductTradingPoint `protobuf:"bytes,7,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *TradingPoint) Reset() {
	*x = TradingPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingPoint) ProtoMessage() {}

func (x *TradingPoint) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingPoint.ProtoReflect.Descriptor instead.
func (*TradingPoint) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{0}
}

func (x *TradingPoint) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TradingPoint) GetType() TradingPointType {
	if x != nil {
		return x.Type
	}
	return TradingPointType_TRADING_POINT_STORE
}

func (x *TradingPoint) GetAreaPlot() float64 {
	if x != nil {
		return x.AreaPlot
	}
	return 0
}

func (x *TradingPoint) GetRentalCharge() *core.Money {
	if x != nil {
		return x.RentalCharge
	}
	return nil
}

func (x *TradingPoint) GetCounterCount() int32 {
	if x != nil {
		return x.CounterCount
	}
	return 0
}

func (x *TradingPoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TradingPoint) GetProducts() []*ProductTradingPoint {
	if x != nil {
		return x.Products
	}
	return nil
}

type ProductTradingPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity  int32       `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price     *core.Money `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	ProductId int32       `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *ProductTradingPoint) Reset() {
	*x = ProductTradingPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductTradingPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductTradingPoint) ProtoMessage() {}

func (x *ProductTradingPoint) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductTradingPoint.ProtoReflect.Descriptor instead.
func (*ProductTradingPoint) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{1}
}

func (x *ProductTradingPoint) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ProductTradingPoint) GetPrice() *core.Money {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ProductTradingPoint) GetProductId() int32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type PlaceOfWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type PlaceOfWorkType `protobuf:"varint,2,opt,name=type,proto3,enum=tradingpoint.PlaceOfWorkType" json:"type,omitempty"`
}

func (x *PlaceOfWork) Reset() {
	*x = PlaceOfWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceOfWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceOfWork) ProtoMessage() {}

func (x *PlaceOfWork) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceOfWork.ProtoReflect.Descriptor instead.
func (*PlaceOfWork) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{2}
}

func (x *PlaceOfWork) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlaceOfWork) GetType() PlaceOfWorkType {
	if x != nil {
		return x.Type
	}
	return PlaceOfWorkType_PLACE_OF_WORK_HALL
}

type HallContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type HallContainerType `protobuf:"varint,2,opt,name=type,proto3,enum=tradingpoint.HallContainerType" json:"type,omitempty"`
}

func (x *HallContainer) Reset() {
	*x = HallContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HallContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HallContainer) ProtoMessage() {}

func (x *HallContainer) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HallContainer.ProtoReflect.Descriptor instead.
func (*HallContainer) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{3}
}

func (x *HallContainer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HallContainer) GetType() HallContainerType {
	if x != nil {
		return x.Type
	}
	return HallContainerType_HALL_CONTAINER_SECTION
}

type ReceiptingPointWithAccounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type ReceiptingPointWithAccountingType `protobuf:"varint,2,opt,name=type,proto3,enum=tradingpoint.ReceiptingPointWithAccountingType" json:"type,omitempty"`
}

func (x *ReceiptingPointWithAccounting) Reset() {
	*x = ReceiptingPointWithAccounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptingPointWithAccounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptingPointWithAccounting) ProtoMessage() {}

func (x *ReceiptingPointWithAccounting) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptingPointWithAccounting.ProtoReflect.Descriptor instead.
func (*ReceiptingPointWithAccounting) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{4}
}

func (x *ReceiptingPointWithAccounting) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReceiptingPointWithAccounting) GetType() ReceiptingPointWithAccountingType {
	if x != nil {
		return x.Type
	}
	return ReceiptingPointWithAccountingType_RECEIPTING_POINT_WITH_ACCOUNTING_DEPARTMENT_STORE
}

type ReceiptingPointWithoutAccounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type ReceiptingPointWithoutAccountingType `protobuf:"varint,2,opt,name=type,proto3,enum=tradingpoint.ReceiptingPointWithoutAccountingType" json:"type,omitempty"`
}

func (x *ReceiptingPointWithoutAccounting) Reset() {
	*x = ReceiptingPointWithoutAccounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptingPointWithoutAccounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptingPointWithoutAccounting) ProtoMessage() {}

func (x *ReceiptingPointWithoutAccounting) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptingPointWithoutAccounting.ProtoReflect.Descriptor instead.
func (*ReceiptingPointWithoutAccounting) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{5}
}

func (x *ReceiptingPointWithoutAccounting) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReceiptingPointWithoutAccounting) GetType() ReceiptingPointWithoutAccountingType {
	if x != nil {
		return x.Type
	}
	return ReceiptingPointWithoutAccountingType_RECEIPTING_POINT_WITHOUT_ACCOUNTING_KIOSK
}

type Hall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	HallContainerId   int32             `protobuf:"varint,2,opt,name=hall_container_id,json=hallContainerId,proto3" json:"hall_container_id,omitempty"`
	HallContainerType HallContainerType `protobuf:"varint,3,opt,name=hall_container_type,json=hallContainerType,proto3,enum=tradingpoint.HallContainerType" json:"hall_container_type,omitempty"`
	TradingPointId    int32             `protobuf:"varint,4,opt,name=trading_point_id,json=tradingPointId,proto3" json:"trading_point_id,omitempty"`
	TradingPointType  TradingPointType  `protobuf:"varint,5,opt,name=trading_point_type,json=tradingPointType,proto3,enum=tradingpoint.TradingPointType" json:"trading_point_type,omitempty"`
}

func (x *Hall) Reset() {
	*x = Hall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hall) ProtoMessage() {}

func (x *Hall) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hall.ProtoReflect.Descriptor instead.
func (*Hall) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{6}
}

func (x *Hall) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Hall) GetHallContainerId() int32 {
	if x != nil {
		return x.HallContainerId
	}
	return 0
}

func (x *Hall) GetHallContainerType() HallContainerType {
	if x != nil {
		return x.HallContainerType
	}
	return HallContainerType_HALL_CONTAINER_SECTION
}

func (x *Hall) GetTradingPointId() int32 {
	if x != nil {
		return x.TradingPointId
	}
	return 0
}

func (x *Hall) GetTradingPointType() TradingPointType {
	if x != nil {
		return x.TradingPointType
	}
	return TradingPointType_TRADING_POINT_STORE
}

type Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DepartmentStoreId int32 `protobuf:"varint,2,opt,name=department_store_id,json=departmentStoreId,proto3" json:"department_store_id,omitempty"`
}

func (x *Section) Reset() {
	*x = Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Section) ProtoMessage() {}

func (x *Section) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Section.ProtoReflect.Descriptor instead.
func (*Section) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{7}
}

func (x *Section) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Section) GetDepartmentStoreId() int32 {
	if x != nil {
		return x.DepartmentStoreId
	}
	return 0
}

type DepartmentStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            int32                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradingPoint                  *TradingPoint                  `protobuf:"bytes,2,opt,name=trading_point,json=tradingPoint,proto3" json:"trading_point,omitempty"`
	ReceiptingPointWithAccounting *ReceiptingPointWithAccounting `protobuf:"bytes,3,opt,name=receipting_point_with_accounting,json=receiptingPointWithAccounting,proto3" json:"receipting_point_with_accounting,omitempty"`
	Sections                      []*Section                     `protobuf:"bytes,4,rep,name=sections,proto3" json:"sections,omitempty"`
	Halls                         []*Hall                        `protobuf:"bytes,5,rep,name=halls,proto3" json:"halls,omitempty"`
}

func (x *DepartmentStore) Reset() {
	*x = DepartmentStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentStore) ProtoMessage() {}

func (x *DepartmentStore) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentStore.ProtoReflect.Descriptor instead.
func (*DepartmentStore) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{8}
}

func (x *DepartmentStore) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DepartmentStore) GetTradingPoint() *TradingPoint {
	if x != nil {
		return x.TradingPoint
	}
	return nil
}

func (x *DepartmentStore) GetReceiptingPointWithAccounting() *ReceiptingPointWithAccounting {
	if x != nil {
		return x.ReceiptingPointWithAccounting
	}
	return nil
}

func (x *DepartmentStore) GetSections() []*Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *DepartmentStore) GetHalls() []*Hall {
	if x != nil {
		return x.Halls
	}
	return nil
}

type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            int32                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradingPoint                  *TradingPoint                  `protobuf:"bytes,2,opt,name=trading_point,json=tradingPoint,proto3" json:"trading_point,omitempty"`
	ReceiptingPointWithAccounting *ReceiptingPointWithAccounting `protobuf:"bytes,3,opt,name=receipting_point_with_accounting,json=receiptingPointWithAccounting,proto3" json:"receipting_point_with_accounting,omitempty"`
	HallContainer                 *HallContainer                 `protobuf:"bytes,4,opt,name=hall_container,json=hallContainer,proto3" json:"hall_container,omitempty"`
	Halls                         []*Hall                        `protobuf:"bytes,5,rep,name=halls,proto3" json:"halls,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{9}
}

func (x *Store) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Store) GetTradingPoint() *TradingPoint {
	if x != nil {
		return x.TradingPoint
	}
	return nil
}

func (x *Store) GetReceiptingPointWithAccounting() *ReceiptingPointWithAccounting {
	if x != nil {
		return x.ReceiptingPointWithAccounting
	}
	return nil
}

func (x *Store) GetHallContainer() *HallContainer {
	if x != nil {
		return x.HallContainer
	}
	return nil
}

func (x *Store) GetHalls() []*Hall {
	if x != nil {
		return x.Halls
	}
	return nil
}

type Kiosk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                               int32                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradingPoint                     *TradingPoint                     `protobuf:"bytes,2,opt,name=trading_point,json=tradingPoint,proto3" json:"trading_point,omitempty"`
	ReceiptingPointWithoutAccounting *ReceiptingPointWithoutAccounting `protobuf:"bytes,3,opt,name=receipting_point_without_accounting,json=receiptingPointWithoutAccounting,proto3" json:"receipting_point_without_accounting,omitempty"`
	PlaceOfWork                      *PlaceOfWork                      `protobuf:"bytes,4,opt,name=place_of_work,json=placeOfWork,proto3" json:"place_of_work,omitempty"`
}

func (x *Kiosk) Reset() {
	*x = Kiosk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kiosk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kiosk) ProtoMessage() {}

func (x *Kiosk) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kiosk.ProtoReflect.Descriptor instead.
func (*Kiosk) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{10}
}

func (x *Kiosk) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Kiosk) GetTradingPoint() *TradingPoint {
	if x != nil {
		return x.TradingPoint
	}
	return nil
}

func (x *Kiosk) GetReceiptingPointWithoutAccounting() *ReceiptingPointWithoutAccounting {
	if x != nil {
		return x.ReceiptingPointWithoutAccounting
	}
	return nil
}

func (x *Kiosk) GetPlaceOfWork() *PlaceOfWork {
	if x != nil {
		return x.PlaceOfWork
	}
	return nil
}

type Tray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                               int32                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradingPoint                     *TradingPoint                     `protobuf:"bytes,2,opt,name=trading_point,json=tradingPoint,proto3" json:"trading_point,omitempty"`
	ReceiptingPointWithoutAccounting *ReceiptingPointWithoutAccounting `protobuf:"bytes,3,opt,name=receipting_point_without_accounting,json=receiptingPointWithoutAccounting,proto3" json:"receipting_point_without_accounting,omitempty"`
	PlaceOfWork                      *PlaceOfWork                      `protobuf:"bytes,4,opt,name=place_of_work,json=placeOfWork,proto3" json:"place_of_work,omitempty"`
}

func (x *Tray) Reset() {
	*x = Tray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tray) ProtoMessage() {}

func (x *Tray) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tray.ProtoReflect.Descriptor instead.
func (*Tray) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{11}
}

func (x *Tray) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tray) GetTradingPoint() *TradingPoint {
	if x != nil {
		return x.TradingPoint
	}
	return nil
}

func (x *Tray) GetReceiptingPointWithoutAccounting() *ReceiptingPointWithoutAccounting {
	if x != nil {
		return x.ReceiptingPointWithoutAccounting
	}
	return nil
}

func (x *Tray) GetPlaceOfWork() *PlaceOfWork {
	if x != nil {
		return x.PlaceOfWork
	}
	return nil
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         TradingPointType `protobuf:"varint,1,opt,name=type,proto3,enum=tradingpoint.TradingPointType" json:"type,omitempty"`
	AreaPlot     float64          `protobuf:"fixed64,2,opt,name=area_plot,json=areaPlot,proto3" json:"area_plot,omitempty"`
	RentalCharge *core.Money      `protobuf:"bytes,3,opt,name=rental_charge,json=rentalCharge,proto3" json:"rental_charge,omitempty"`
	CounterCount int32            `protobuf:"varint,4,opt,name=counter_count,json=counterCount,proto3" json:"counter_count,omitempty"`
	Address      string           `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{12}
}

func (x *RegisterRequest) GetType() TradingPointType {
	if x != nil {
		return x.Type
	}
	return TradingPointType_TRADING_POINT_STORE
}

func (x *RegisterRequest) GetAreaPlot() float64 {
	if x != nil {
		return x.AreaPlot
	}
	return 0
}

func (x *RegisterRequest) GetRentalCharge() *core.Money {
	if x != nil {
		return x.RentalCharge
	}
	return nil
}

func (x *RegisterRequest) GetCounterCount() int32 {
	if x != nil {
		return x.CounterCount
	}
	return 0
}

func (x *RegisterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{13}
}

func (x *RegisterResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{14}
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingPoints []*TradingPoint `protobuf:"bytes,1,rep,name=trading_points,json=tradingPoints,proto3" json:"trading_points,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{15}
}

func (x *ListResponse) GetTradingPoints() []*TradingPoint {
	if x != nil {
		return x.TradingPoints
	}
	return nil
}

type TradingPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type TradingPointType `protobuf:"varint,2,opt,name=type,proto3,enum=tradingpoint.TradingPointType" json:"type,omitempty"`
}

func (x *TradingPointRequest) Reset() {
	*x = TradingPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingPointRequest) ProtoMessage() {}

func (x *TradingPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingPointRequest.ProtoReflect.Descriptor instead.
func (*TradingPointRequest) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{16}
}

func (x *TradingPointRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TradingPointRequest) GetType() TradingPointType {
	if x != nil {
		return x.Type
	}
	return TradingPointType_TRADING_POINT_STORE
}

type TradingPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingPoint *TradingPoint `protobuf:"bytes,1,opt,name=trading_point,json=tradingPoint,proto3" json:"trading_point,omitempty"`
}

func (x *TradingPointResponse) Reset() {
	*x = TradingPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingPointResponse) ProtoMessage() {}

func (x *TradingPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingPointResponse.ProtoReflect.Descriptor instead.
func (*TradingPointResponse) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{17}
}

func (x *TradingPointResponse) GetTradingPoint() *TradingPoint {
	if x != nil {
		return x.TradingPoint
	}
	return nil
}

type AddSectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartmentStoreId int32 `protobuf:"varint,1,opt,name=department_store_id,json=departmentStoreId,proto3" json:"department_store_id,omitempty"`
}

func (x *AddSectionRequest) Reset() {
	*x = AddSectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSectionRequest) ProtoMessage() {}

func (x *AddSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSectionRequest.ProtoReflect.Descriptor instead.
func (*AddSectionRequest) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{18}
}

func (x *AddSectionRequest) GetDepartmentStoreId() int32 {
	if x != nil {
		return x.DepartmentStoreId
	}
	return 0
}

type AddSectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddSectionResponse) Reset() {
	*x = AddSectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSectionResponse) ProtoMessage() {}

func (x *AddSectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSectionResponse.ProtoReflect.Descriptor instead.
func (*AddSectionResponse) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{19}
}

func (x *AddSectionResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AddHallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HallContainerId   int32             `protobuf:"varint,1,opt,name=hall_container_id,json=hallContainerId,proto3" json:"hall_container_id,omitempty"`
	HallContainerType HallContainerType `protobuf:"varint,2,opt,name=hall_container_type,json=hallContainerType,proto3,enum=tradingpoint.HallContainerType" json:"hall_container_type,omitempty"`
	TradingPointId    int32             `protobuf:"varint,3,opt,name=trading_point_id,json=tradingPointId,proto3" json:"trading_point_id,omitempty"`
	TradingPointType  TradingPointType  `protobuf:"varint,4,opt,name=trading_point_type,json=tradingPointType,proto3,enum=tradingpoint.TradingPointType" json:"trading_point_type,omitempty"`
}

func (x *AddHallRequest) Reset() {
	*x = AddHallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHallRequest) ProtoMessage() {}

func (x *AddHallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHallRequest.ProtoReflect.Descriptor instead.
func (*AddHallRequest) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{20}
}

func (x *AddHallRequest) GetHallContainerId() int32 {
	if x != nil {
		return x.HallContainerId
	}
	return 0
}

func (x *AddHallRequest) GetHallContainerType() HallContainerType {
	if x != nil {
		return x.HallContainerType
	}
	return HallContainerType_HALL_CONTAINER_SECTION
}

func (x *AddHallRequest) GetTradingPointId() int32 {
	if x != nil {
		return x.TradingPointId
	}
	return 0
}

func (x *AddHallRequest) GetTradingPointType() TradingPointType {
	if x != nil {
		return x.TradingPointType
	}
	return TradingPointType_TRADING_POINT_STORE
}

type AddHallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddHallResponse) Reset() {
	*x = AddHallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHallResponse) ProtoMessage() {}

func (x *AddHallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHallResponse.ProtoReflect.Descriptor instead.
func (*AddHallResponse) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{21}
}

func (x *AddHallResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DepartmentStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DepartmentStoreRequest) Reset() {
	*x = DepartmentStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentStoreRequest) ProtoMessage() {}

func (x *DepartmentStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentStoreRequest.ProtoReflect.Descriptor instead.
func (*DepartmentStoreRequest) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{22}
}

func (x *DepartmentStoreRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DepartmentStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartmentStore *DepartmentStore `protobuf:"bytes,1,opt,name=department_store,json=departmentStore,proto3" json:"department_store,omitempty"`
}

func (x *DepartmentStoreResponse) Reset() {
	*x = DepartmentStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentStoreResponse) ProtoMessage() {}

func (x *DepartmentStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentStoreResponse.ProtoReflect.Descriptor instead.
func (*DepartmentStoreResponse) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{23}
}

func (x *DepartmentStoreResponse) GetDepartmentStore() *DepartmentStore {
	if x != nil {
		return x.DepartmentStore
	}
	return nil
}

type StoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StoreRequest) Reset() {
	*x = StoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRequest) ProtoMessage() {}

func (x *StoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRequest.ProtoReflect.Descriptor instead.
func (*StoreRequest) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{24}
}

func (x *StoreRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type StoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store *Store `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *StoreResponse) Reset() {
	*x = StoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreResponse) ProtoMessage() {}

func (x *StoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreResponse.ProtoReflect.Descriptor instead.
func (*StoreResponse) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{25}
}

func (x *StoreResponse) GetStore() *Store {
	if x != nil {
		return x.Store
	}
	return nil
}

type KioskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KioskRequest) Reset() {
	*x = KioskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KioskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KioskRequest) ProtoMessage() {}

func (x *KioskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KioskRequest.ProtoReflect.Descriptor instead.
func (*KioskRequest) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{26}
}

func (x *KioskRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type KioskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kiosk *Kiosk `protobuf:"bytes,1,opt,name=kiosk,proto3" json:"kiosk,omitempty"`
}

func (x *KioskResponse) Reset() {
	*x = KioskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KioskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KioskResponse) ProtoMessage() {}

func (x *KioskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KioskResponse.ProtoReflect.Descriptor instead.
func (*KioskResponse) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{27}
}

func (x *KioskResponse) GetKiosk() *Kiosk {
	if x != nil {
		return x.Kiosk
	}
	return nil
}

type TrayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TrayRequest) Reset() {
	*x = TrayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrayRequest) ProtoMessage() {}

func (x *TrayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrayRequest.ProtoReflect.Descriptor instead.
func (*TrayRequest) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{28}
}

func (x *TrayRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TrayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tray *Tray `protobuf:"bytes,1,opt,name=tray,proto3" json:"tray,omitempty"`
}

func (x *TrayResponse) Reset() {
	*x = TrayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tradingpoint_tradingpoint_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrayResponse) ProtoMessage() {}

func (x *TrayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tradingpoint_tradingpoint_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrayResponse.ProtoReflect.Descriptor instead.
func (*TrayResponse) Descriptor() ([]byte, []int) {
	return file_tradingpoint_tradingpoint_proto_rawDescGZIP(), []int{29}
}

func (x *TrayResponse) GetTray() *Tray {
	if x != nil {
		return x.Tray
	}
	return nil
}

var File_tradingpoint_tradingpoint_proto protoreflect.FileDescriptor

var file_tradingpoint_tradingpoint_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a,
	0x10, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70,
	0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x50,
	0x6c, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x0d, 0x48, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x74, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x04, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68,
	0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x13, 0x68, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x68, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x49, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x0f,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x74, 0x0a, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x68, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x68, 0x61,
	0x6c, 0x6c, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x74,
	0x0a, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x68, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0d, 0x68, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x68, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x68, 0x61, 0x6c,
	0x6c, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x05, 0x4b, 0x69, 0x6f, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x7d, 0x0a,
	0x23, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0d,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x22, 0x95, 0x02, 0x0a, 0x04,
	0x54, 0x72, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x23, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x57,
	0x6f, 0x72, 0x6b, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x70, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x61, 0x72, 0x65, 0x61, 0x50, 0x6c, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0c, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0d, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x59, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x85,
	0x02, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a,
	0x13, 0x68, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x68, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x48, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x17, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x10, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x4b, 0x69, 0x6f, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x0d, 0x4b, 0x69, 0x6f, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6b, 0x69, 0x6f, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6f, 0x73, 0x6b, 0x52, 0x05, 0x6b, 0x69, 0x6f, 0x73, 0x6b,
	0x22, 0x1d, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x36, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x74, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x79, 0x52, 0x04, 0x74, 0x72, 0x61, 0x79, 0x2a, 0x80, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4f, 0x53, 0x4b,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x59, 0x10, 0x03, 0x2a, 0x5a, 0x0a, 0x0f, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x48,
	0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4f,
	0x46, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4b, 0x49, 0x4f, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x54, 0x52, 0x41, 0x59, 0x10, 0x02, 0x2a, 0x49, 0x0a, 0x11, 0x48, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x48,
	0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x41, 0x4c, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0x01, 0x2a, 0x86, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x31, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x50, 0x41,
	0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x2a,
	0x0a, 0x26, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x2a, 0x83, 0x01, 0x0a, 0x24, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x49, 0x4f, 0x53, 0x4b,
	0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x59, 0x10, 0x01,
	0x32, 0xb2, 0x05, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x4b, 0x69, 0x6f, 0x73, 0x6b, 0x12, 0x1a, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6f,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6f, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x54, 0x72, 0x61, 0x79, 0x12, 0x19,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x78, 0x2f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x3b, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tradingpoint_tradingpoint_proto_rawDescOnce sync.Once
	file_tradingpoint_tradingpoint_proto_rawDescData = file_tradingpoint_tradingpoint_proto_rawDesc
)

func file_tradingpoint_tradingpoint_proto_rawDescGZIP() []byte {
	file_tradingpoint_tradingpoint_proto_rawDescOnce.Do(func() {
		file_tradingpoint_tradingpoint_proto_rawDescData = protoimpl.X.CompressGZIP(file_tradingpoint_tradingpoint_proto_rawDescData)
	})
	return file_tradingpoint_tradingpoint_proto_rawDescData
}

var file_tradingpoint_tradingpoint_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_tradingpoint_tradingpoint_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_tradingpoint_tradingpoint_proto_goTypes = []interface{}{
	(TradingPointType)(0),                     // 0: tradingpoint.TradingPointType
	(PlaceOfWorkType)(0),                      // 1: tradingpoint.PlaceOfWorkType
	(HallContainerType)(0),                    // 2: tradingpoint.HallContainerType
	(ReceiptingPointWithAccountingType)(0),    // 3: tradingpoint.ReceiptingPointWithAccountingType
	(ReceiptingPointWithoutAccountingType)(0), // 4: tradingpoint.ReceiptingPointWithoutAccountingType
	(*TradingPoint)(nil),                      // 5: tradingpoint.TradingPoint
	(*ProductTradingPoint)(nil),               // 6: tradingpoint.ProductTradingPoint
	(*PlaceOfWork)(nil),                       // 7: tradingpoint.PlaceOfWork
	(*HallContainer)(nil),                     // 8: tradingpoint.HallContainer
	(*ReceiptingPointWithAccounting)(nil),     // 9: tradingpoint.ReceiptingPointWithAccounting
	(*ReceiptingPointWithoutAccounting)(nil),  // 10: tradingpoint.ReceiptingPointWithoutAccounting
	(*Hall)(nil),                              // 11: tradingpoint.Hall
	(*Section)(nil),                           // 12: tradingpoint.Section
	(*DepartmentStore)(nil),                   // 13: tradingpoint.DepartmentStore
	(*Store)(nil),                             // 14: tradingpoint.Store
	(*Kiosk)(nil),                             // 15: tradingpoint.Kiosk
	(*Tray)(nil),                              // 16: tradingpoint.Tray
	(*RegisterRequest)(nil),                   // 17: tradingpoint.RegisterRequest
	(*RegisterResponse)(nil),                  // 18: tradingpoint.RegisterResponse
	(*ListRequest)(nil),                       // 19: tradingpoint.ListRequest
	(*ListResponse)(nil),                      // 20: tradingpoint.ListResponse
	(*TradingPointRequest)(nil),               // 21: tradingpoint.TradingPointRequest
	(*TradingPointResponse)(nil),              // 22: tradingpoint.TradingPointResponse
	(*AddSectionRequest)(nil),                 // 23: tradingpoint.AddSectionRequest
	(*AddSectionResponse)(nil),                // 24: tradingpoint.AddSectionResponse
	(*AddHallRequest)(nil),                    // 25: tradingpoint.AddHallRequest
	(*AddHallResponse)(nil),                   // 26: tradingpoint.AddHallResponse
	(*DepartmentStoreRequest)(nil),            // 27: tradingpoint.DepartmentStoreRequest
	(*DepartmentStoreResponse)(nil),           // 28: tradingpoint.DepartmentStoreResponse
	(*StoreRequest)(nil),                      // 29: tradingpoint.StoreRequest
	(*StoreResponse)(nil),                     // 30: tradingpoint.StoreResponse
	(*KioskRequest)(nil),                      // 31: tradingpoint.KioskRequest
	(*KioskResponse)(nil),                     // 32: tradingpoint.KioskResponse
	(*TrayRequest)(nil),                       // 33: tradingpoint.TrayRequest
	(*TrayResponse)(nil),                      // 34: tradingpoint.TrayResponse
	(*core.Money)(nil),                        // 35: core.Money
}
var file_tradingpoint_tradingpoint_proto_depIdxs = []int32{
	0,  // 0: tradingpoint.TradingPoint.type:type_name -> tradingpoint.TradingPointType
	35, // 1: tradingpoint.TradingPoint.rental_charge:type_name -> core.Money
	6,  // 2: tradingpoint.TradingPoint.products:type_name -> tradingpoint.ProductTradingPoint
	35, // 3: tradingpoint.ProductTradingPoint.price:type_name -> core.Money
	1,  // 4: tradingpoint.PlaceOfWork.type:type_name -> tradingpoint.PlaceOfWorkType
	2,  // 5: tradingpoint.HallContainer.type:type_name -> tradingpoint.HallContainerType
	3,  // 6: tradingpoint.ReceiptingPointWithAccounting.type:type_name -> tradingpoint.ReceiptingPointWithAccountingType
	4,  // 7: tradingpoint.ReceiptingPointWithoutAccounting.type:type_name -> tradingpoint.ReceiptingPointWithoutAccountingType
	2,  // 8: tradingpoint.Hall.hall_container_type:type_name -> tradingpoint.HallContainerType
	0,  // 9: tradingpoint.Hall.trading_point_type:type_name -> tradingpoint.TradingPointType
	5,  // 10: tradingpoint.DepartmentStore.trading_point:type_name -> tradingpoint.TradingPoint
	9,  // 11: tradingpoint.DepartmentStore.receipting_point_with_accounting:type_name -> tradingpoint.ReceiptingPointWithAccounting
	12, // 12: tradingpoint.DepartmentStore.sections:type_name -> tradingpoint.Section
	11, // 13: tradingpoint.DepartmentStore.halls:type_name -> tradingpoint.Hall
	5,  // 14: tradingpoint.Store.trading_point:type_name -> tradingpoint.TradingPoint
	9,  // 15: tradingpoint.Store.receipting_point_with_accounting:type_name -> tradingpoint.ReceiptingPointWithAccounting
	8,  // 16: tradingpoint.Store.hall_container:type_name -> tradingpoint.HallContainer
	11, // 17: tradingpoint.Store.halls:type_name -> tradingpoint.Hall
	5,  // 18: tradingpoint.Kiosk.trading_point:type_name -> tradingpoint.TradingPoint
	10, // 19: tradingpoint.Kiosk.receipting_point_without_accounting:type_name -> tradingpoint.ReceiptingPointWithoutAccounting
	7,  // 20: tradingpoint.Kiosk.place_of_work:type_name -> tradingpoint.PlaceOfWork
	5,  // 21: tradingpoint.Tray.trading_point:type_name -> tradingpoint.TradingPoint
	10, // 22: tradingpoint.Tray.receipting_point_without_accounting:type_name -> tradingpoint.ReceiptingPointWithoutAccounting
	7,  // 23: tradingpoint.Tray.place_of_work:type_name -> tradingpoint.PlaceOfWork
	0,  // 24: tradingpoint.RegisterRequest.type:type_name -> tradingpoint.TradingPointType
	35, // 25: tradingpoint.RegisterRequest.rental_charge:type_name -> core.Money
	5,  // 26: tradingpoint.ListResponse.trading_points:type_name -> tradingpoint.TradingPoint
	0,  // 27: tradingpoint.TradingPointRequest.type:type_name -> tradingpoint.TradingPointType
	5,  // 28: tradingpoint.TradingPointResponse.trading_point:type_name -> tradingpoint.TradingPoint
	2,  // 29: tradingpoint.AddHallRequest.hall_container_type:type_name -> tradingpoint.HallContainerType
	0,  // 30: tradingpoint.AddHallRequest.trading_point_type:type_name -> tradingpoint.TradingPointType
	13, // 31: tradingpoint.DepartmentStoreResponse.department_store:type_name -> tradingpoint.DepartmentStore
	14, // 32: tradingpoint.StoreResponse.store:type_name -> tradingpoint.Store
	15, // 33: tradingpoint.KioskResponse.kiosk:type_name -> tradingpoint.Kiosk
	16, // 34: tradingpoint.TrayResponse.tray:type_name -> tradingpoint.Tray
	17, // 35: tradingpoint.TradingPointService.Register:input_type -> tradingpoint.RegisterRequest
	19, // 36: tradingpoint.TradingPointService.List:input_type -> tradingpoint.ListRequest
	21, // 37: tradingpoint.TradingPointService.TradingPoint:input_type -> tradingpoint.TradingPointRequest
	23, // 38: tradingpoint.TradingPointService.AddSection:input_type -> tradingpoint.AddSectionRequest
	25, // 39: tradingpoint.TradingPointService.AddHall:input_type -> tradingpoint.AddHallRequest
	27, // 40: tradingpoint.TradingPointService.DepartmentStore:input_type -> tradingpoint.DepartmentStoreRequest
	29, // 41: tradingpoint.TradingPointService.Store:input_type -> tradingpoint.StoreRequest
	31, // 42: tradingpoint.TradingPointService.Kiosk:input_type -> tradingpoint.KioskRequest
	33, // 43: tradingpoint.TradingPointService.Tray:input_type -> tradingpoint.TrayRequest
	18, // 44: tradingpoint.TradingPointService.Register:output_type -> tradingpoint.RegisterResponse
	20, // 45: tradingpoint.TradingPointService.List:output_type -> tradingpoint.ListResponse
	22, // 46: tradingpoint.TradingPointService.TradingPoint:output_type -> tradingpoint.TradingPointResponse
	24, // 47: tradingpoint.TradingPointService.AddSection:output_type -> tradingpoint.AddSectionResponse
	26, // 48: tradingpoint.TradingPointService.AddHall:output_type -> tradingpoint.AddHallResponse
	28, // 49: tradingpoint.TradingPointService.DepartmentStore:output_type -> tradingpoint.DepartmentStoreResponse
	30, // 50: tradingpoint.TradingPointService.Store:output_type -> tradingpoint.StoreResponse
	32, // 51: tradingpoint.TradingPointService.Kiosk:output_type -> tradingpoint.KioskResponse
	34, // 52: tradingpoint.TradingPointService.Tray:output_type -> tradingpoint.TrayResponse
	44, // [44:53] is the sub-list for method output_type
	35, // [35:44] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_tradingpoint_tradingpoint_proto_init() }
func file_tradingpoint_tradingpoint_proto_init() {
	if File_tradingpoint_tradingpoint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tradingpoint_tradingpoint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductTradingPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceOfWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HallContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptingPointWithAccounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptingPointWithoutAccounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kiosk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KioskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KioskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tradingpoint_tradingpoint_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tradingpoint_tradingpoint_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tradingpoint_tradingpoint_proto_goTypes,
		DependencyIndexes: file_tradingpoint_tradingpoint_proto_depIdxs,
		EnumInfos:         file_tradingpoint_tradingpoint_proto_enumTypes,
		MessageInfos:      file_tradingpoint_tradingpoint_proto_msgTypes,
	}.Build()
	File_tradingpoint_tradingpoint_proto = out.File
	file_tradingpoint_tradingpoint_proto_rawDesc = nil
	file_tradingpoint_tradingpoint_proto_goTypes = nil
	file_tradingpoint_tradingpoint_proto_depIdxs = nil
}
