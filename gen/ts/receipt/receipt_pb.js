// source: receipt/receipt.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var core_money_pb = require('../core/money_pb.js');
goog.object.extend(proto, core_money_pb);
var product_product_pb = require('../product/product_pb.js');
goog.object.extend(proto, product_product_pb);
var tradingpoint_tradingpoint_pb = require('../tradingpoint/tradingpoint_pb.js');
goog.object.extend(proto, tradingpoint_tradingpoint_pb);
goog.exportSymbol('proto.receipt.CreateWithAccountingRequest', null, global);
goog.exportSymbol('proto.receipt.CreateWithAccountingResponse', null, global);
goog.exportSymbol('proto.receipt.CreateWithoutAccountingRequest', null, global);
goog.exportSymbol('proto.receipt.CreateWithoutAccountingResponse', null, global);
goog.exportSymbol('proto.receipt.Receipt', null, global);
goog.exportSymbol('proto.receipt.ReceiptProduct', null, global);
goog.exportSymbol('proto.receipt.ReceiptType', null, global);
goog.exportSymbol('proto.receipt.ReceiptWithAccounting', null, global);
goog.exportSymbol('proto.receipt.ReceiptWithoutAccounting', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.receipt.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.receipt.Receipt.repeatedFields_, null);
};
goog.inherits(proto.receipt.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.receipt.Receipt.displayName = 'proto.receipt.Receipt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.receipt.ReceiptProduct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.receipt.ReceiptProduct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.receipt.ReceiptProduct.displayName = 'proto.receipt.ReceiptProduct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.receipt.ReceiptWithAccounting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.receipt.ReceiptWithAccounting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.receipt.ReceiptWithAccounting.displayName = 'proto.receipt.ReceiptWithAccounting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.receipt.ReceiptWithoutAccounting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.receipt.ReceiptWithoutAccounting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.receipt.ReceiptWithoutAccounting.displayName = 'proto.receipt.ReceiptWithoutAccounting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.receipt.CreateWithAccountingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.receipt.CreateWithAccountingRequest.repeatedFields_, null);
};
goog.inherits(proto.receipt.CreateWithAccountingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.receipt.CreateWithAccountingRequest.displayName = 'proto.receipt.CreateWithAccountingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.receipt.CreateWithAccountingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.receipt.CreateWithAccountingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.receipt.CreateWithAccountingResponse.displayName = 'proto.receipt.CreateWithAccountingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.receipt.CreateWithoutAccountingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.receipt.CreateWithoutAccountingRequest.repeatedFields_, null);
};
goog.inherits(proto.receipt.CreateWithoutAccountingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.receipt.CreateWithoutAccountingRequest.displayName = 'proto.receipt.CreateWithoutAccountingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.receipt.CreateWithoutAccountingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.receipt.CreateWithoutAccountingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.receipt.CreateWithoutAccountingResponse.displayName = 'proto.receipt.CreateWithoutAccountingResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.receipt.Receipt.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.receipt.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.receipt.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.receipt.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    sellerId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.receipt.ReceiptProduct.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.receipt.Receipt}
 */
proto.receipt.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.receipt.Receipt;
  return proto.receipt.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.receipt.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.receipt.Receipt}
 */
proto.receipt.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.receipt.ReceiptType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSellerId(value);
      break;
    case 5:
      var value = new proto.receipt.ReceiptProduct;
      reader.readMessage(value,proto.receipt.ReceiptProduct.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.receipt.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.receipt.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.receipt.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSellerId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.receipt.ReceiptProduct.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.receipt.Receipt.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.Receipt} returns this
 */
proto.receipt.Receipt.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ReceiptType type = 2;
 * @return {!proto.receipt.ReceiptType}
 */
proto.receipt.Receipt.prototype.getType = function() {
  return /** @type {!proto.receipt.ReceiptType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.receipt.ReceiptType} value
 * @return {!proto.receipt.Receipt} returns this
 */
proto.receipt.Receipt.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.receipt.Receipt.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.receipt.Receipt} returns this
*/
proto.receipt.Receipt.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.receipt.Receipt} returns this
 */
proto.receipt.Receipt.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.receipt.Receipt.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 seller_id = 4;
 * @return {number}
 */
proto.receipt.Receipt.prototype.getSellerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.Receipt} returns this
 */
proto.receipt.Receipt.prototype.setSellerId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated ReceiptProduct products = 5;
 * @return {!Array<!proto.receipt.ReceiptProduct>}
 */
proto.receipt.Receipt.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.receipt.ReceiptProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.receipt.ReceiptProduct, 5));
};


/**
 * @param {!Array<!proto.receipt.ReceiptProduct>} value
 * @return {!proto.receipt.Receipt} returns this
*/
proto.receipt.Receipt.prototype.setProductsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.receipt.ReceiptProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.receipt.ReceiptProduct}
 */
proto.receipt.Receipt.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.receipt.ReceiptProduct, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.receipt.Receipt} returns this
 */
proto.receipt.Receipt.prototype.clearProductsList = function() {
  return this.setProductsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.receipt.ReceiptProduct.prototype.toObject = function(opt_includeInstance) {
  return proto.receipt.ReceiptProduct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.receipt.ReceiptProduct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.ReceiptProduct.toObject = function(includeInstance, msg) {
  var f, obj = {
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    price: (f = msg.getPrice()) && core_money_pb.Money.toObject(includeInstance, f),
    product: (f = msg.getProduct()) && product_product_pb.Product.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.receipt.ReceiptProduct}
 */
proto.receipt.ReceiptProduct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.receipt.ReceiptProduct;
  return proto.receipt.ReceiptProduct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.receipt.ReceiptProduct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.receipt.ReceiptProduct}
 */
proto.receipt.ReceiptProduct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantity(value);
      break;
    case 3:
      var value = new core_money_pb.Money;
      reader.readMessage(value,core_money_pb.Money.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 4:
      var value = new product_product_pb.Product;
      reader.readMessage(value,product_product_pb.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.receipt.ReceiptProduct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.receipt.ReceiptProduct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.receipt.ReceiptProduct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.ReceiptProduct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_money_pb.Money.serializeBinaryToWriter
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      product_product_pb.Product.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 quantity = 2;
 * @return {number}
 */
proto.receipt.ReceiptProduct.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.ReceiptProduct} returns this
 */
proto.receipt.ReceiptProduct.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional core.Money price = 3;
 * @return {?proto.core.Money}
 */
proto.receipt.ReceiptProduct.prototype.getPrice = function() {
  return /** @type{?proto.core.Money} */ (
    jspb.Message.getWrapperField(this, core_money_pb.Money, 3));
};


/**
 * @param {?proto.core.Money|undefined} value
 * @return {!proto.receipt.ReceiptProduct} returns this
*/
proto.receipt.ReceiptProduct.prototype.setPrice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.receipt.ReceiptProduct} returns this
 */
proto.receipt.ReceiptProduct.prototype.clearPrice = function() {
  return this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.receipt.ReceiptProduct.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional product.Product product = 4;
 * @return {?proto.product.Product}
 */
proto.receipt.ReceiptProduct.prototype.getProduct = function() {
  return /** @type{?proto.product.Product} */ (
    jspb.Message.getWrapperField(this, product_product_pb.Product, 4));
};


/**
 * @param {?proto.product.Product|undefined} value
 * @return {!proto.receipt.ReceiptProduct} returns this
*/
proto.receipt.ReceiptProduct.prototype.setProduct = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.receipt.ReceiptProduct} returns this
 */
proto.receipt.ReceiptProduct.prototype.clearProduct = function() {
  return this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.receipt.ReceiptProduct.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.receipt.ReceiptWithAccounting.prototype.toObject = function(opt_includeInstance) {
  return proto.receipt.ReceiptWithAccounting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.receipt.ReceiptWithAccounting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.ReceiptWithAccounting.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    customerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    receiptingPointWithAccountingId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    receiptingPointWithAccountingType: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.receipt.ReceiptWithAccounting}
 */
proto.receipt.ReceiptWithAccounting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.receipt.ReceiptWithAccounting;
  return proto.receipt.ReceiptWithAccounting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.receipt.ReceiptWithAccounting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.receipt.ReceiptWithAccounting}
 */
proto.receipt.ReceiptWithAccounting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCustomerId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceiptingPointWithAccountingId(value);
      break;
    case 4:
      var value = /** @type {!proto.tradingpoint.ReceiptingPointWithAccountingType} */ (reader.readEnum());
      msg.setReceiptingPointWithAccountingType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.receipt.ReceiptWithAccounting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.receipt.ReceiptWithAccounting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.receipt.ReceiptWithAccounting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.ReceiptWithAccounting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCustomerId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getReceiptingPointWithAccountingId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getReceiptingPointWithAccountingType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.receipt.ReceiptWithAccounting.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.ReceiptWithAccounting} returns this
 */
proto.receipt.ReceiptWithAccounting.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 customer_id = 2;
 * @return {number}
 */
proto.receipt.ReceiptWithAccounting.prototype.getCustomerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.ReceiptWithAccounting} returns this
 */
proto.receipt.ReceiptWithAccounting.prototype.setCustomerId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 receipting_point_with_accounting_id = 3;
 * @return {number}
 */
proto.receipt.ReceiptWithAccounting.prototype.getReceiptingPointWithAccountingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.ReceiptWithAccounting} returns this
 */
proto.receipt.ReceiptWithAccounting.prototype.setReceiptingPointWithAccountingId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional tradingpoint.ReceiptingPointWithAccountingType receipting_point_with_accounting_type = 4;
 * @return {!proto.tradingpoint.ReceiptingPointWithAccountingType}
 */
proto.receipt.ReceiptWithAccounting.prototype.getReceiptingPointWithAccountingType = function() {
  return /** @type {!proto.tradingpoint.ReceiptingPointWithAccountingType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.tradingpoint.ReceiptingPointWithAccountingType} value
 * @return {!proto.receipt.ReceiptWithAccounting} returns this
 */
proto.receipt.ReceiptWithAccounting.prototype.setReceiptingPointWithAccountingType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.receipt.ReceiptWithoutAccounting.prototype.toObject = function(opt_includeInstance) {
  return proto.receipt.ReceiptWithoutAccounting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.receipt.ReceiptWithoutAccounting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.ReceiptWithoutAccounting.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    receiptingPointWithoutAccountingId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    receiptingPointWithoutAccountingType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.receipt.ReceiptWithoutAccounting}
 */
proto.receipt.ReceiptWithoutAccounting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.receipt.ReceiptWithoutAccounting;
  return proto.receipt.ReceiptWithoutAccounting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.receipt.ReceiptWithoutAccounting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.receipt.ReceiptWithoutAccounting}
 */
proto.receipt.ReceiptWithoutAccounting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceiptingPointWithoutAccountingId(value);
      break;
    case 3:
      var value = /** @type {!proto.tradingpoint.ReceiptingPointWithoutAccountingType} */ (reader.readEnum());
      msg.setReceiptingPointWithoutAccountingType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.receipt.ReceiptWithoutAccounting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.receipt.ReceiptWithoutAccounting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.receipt.ReceiptWithoutAccounting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.ReceiptWithoutAccounting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReceiptingPointWithoutAccountingId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getReceiptingPointWithoutAccountingType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.receipt.ReceiptWithoutAccounting.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.ReceiptWithoutAccounting} returns this
 */
proto.receipt.ReceiptWithoutAccounting.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 receipting_point_without_accounting_id = 2;
 * @return {number}
 */
proto.receipt.ReceiptWithoutAccounting.prototype.getReceiptingPointWithoutAccountingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.ReceiptWithoutAccounting} returns this
 */
proto.receipt.ReceiptWithoutAccounting.prototype.setReceiptingPointWithoutAccountingId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional tradingpoint.ReceiptingPointWithoutAccountingType receipting_point_without_accounting_type = 3;
 * @return {!proto.tradingpoint.ReceiptingPointWithoutAccountingType}
 */
proto.receipt.ReceiptWithoutAccounting.prototype.getReceiptingPointWithoutAccountingType = function() {
  return /** @type {!proto.tradingpoint.ReceiptingPointWithoutAccountingType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.tradingpoint.ReceiptingPointWithoutAccountingType} value
 * @return {!proto.receipt.ReceiptWithoutAccounting} returns this
 */
proto.receipt.ReceiptWithoutAccounting.prototype.setReceiptingPointWithoutAccountingType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.receipt.CreateWithAccountingRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.receipt.CreateWithAccountingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.receipt.CreateWithAccountingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.receipt.CreateWithAccountingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.CreateWithAccountingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sellerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.receipt.ReceiptProduct.toObject, includeInstance),
    customerId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    receiptingPointWithAccountingId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    receiptingPointWithAccountingType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.receipt.CreateWithAccountingRequest}
 */
proto.receipt.CreateWithAccountingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.receipt.CreateWithAccountingRequest;
  return proto.receipt.CreateWithAccountingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.receipt.CreateWithAccountingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.receipt.CreateWithAccountingRequest}
 */
proto.receipt.CreateWithAccountingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSellerId(value);
      break;
    case 2:
      var value = new proto.receipt.ReceiptProduct;
      reader.readMessage(value,proto.receipt.ReceiptProduct.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCustomerId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceiptingPointWithAccountingId(value);
      break;
    case 5:
      var value = /** @type {!proto.tradingpoint.ReceiptingPointWithAccountingType} */ (reader.readEnum());
      msg.setReceiptingPointWithAccountingType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.receipt.CreateWithAccountingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.receipt.CreateWithAccountingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.receipt.CreateWithAccountingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.CreateWithAccountingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSellerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.receipt.ReceiptProduct.serializeBinaryToWriter
    );
  }
  f = message.getCustomerId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getReceiptingPointWithAccountingId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getReceiptingPointWithAccountingType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int32 seller_id = 1;
 * @return {number}
 */
proto.receipt.CreateWithAccountingRequest.prototype.getSellerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.CreateWithAccountingRequest} returns this
 */
proto.receipt.CreateWithAccountingRequest.prototype.setSellerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ReceiptProduct products = 2;
 * @return {!Array<!proto.receipt.ReceiptProduct>}
 */
proto.receipt.CreateWithAccountingRequest.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.receipt.ReceiptProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.receipt.ReceiptProduct, 2));
};


/**
 * @param {!Array<!proto.receipt.ReceiptProduct>} value
 * @return {!proto.receipt.CreateWithAccountingRequest} returns this
*/
proto.receipt.CreateWithAccountingRequest.prototype.setProductsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.receipt.ReceiptProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.receipt.ReceiptProduct}
 */
proto.receipt.CreateWithAccountingRequest.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.receipt.ReceiptProduct, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.receipt.CreateWithAccountingRequest} returns this
 */
proto.receipt.CreateWithAccountingRequest.prototype.clearProductsList = function() {
  return this.setProductsList([]);
};


/**
 * optional int32 customer_id = 3;
 * @return {number}
 */
proto.receipt.CreateWithAccountingRequest.prototype.getCustomerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.CreateWithAccountingRequest} returns this
 */
proto.receipt.CreateWithAccountingRequest.prototype.setCustomerId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 receipting_point_with_accounting_id = 4;
 * @return {number}
 */
proto.receipt.CreateWithAccountingRequest.prototype.getReceiptingPointWithAccountingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.CreateWithAccountingRequest} returns this
 */
proto.receipt.CreateWithAccountingRequest.prototype.setReceiptingPointWithAccountingId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional tradingpoint.ReceiptingPointWithAccountingType receipting_point_with_accounting_type = 5;
 * @return {!proto.tradingpoint.ReceiptingPointWithAccountingType}
 */
proto.receipt.CreateWithAccountingRequest.prototype.getReceiptingPointWithAccountingType = function() {
  return /** @type {!proto.tradingpoint.ReceiptingPointWithAccountingType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.tradingpoint.ReceiptingPointWithAccountingType} value
 * @return {!proto.receipt.CreateWithAccountingRequest} returns this
 */
proto.receipt.CreateWithAccountingRequest.prototype.setReceiptingPointWithAccountingType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.receipt.CreateWithAccountingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.receipt.CreateWithAccountingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.receipt.CreateWithAccountingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.CreateWithAccountingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.receipt.CreateWithAccountingResponse}
 */
proto.receipt.CreateWithAccountingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.receipt.CreateWithAccountingResponse;
  return proto.receipt.CreateWithAccountingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.receipt.CreateWithAccountingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.receipt.CreateWithAccountingResponse}
 */
proto.receipt.CreateWithAccountingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.receipt.CreateWithAccountingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.receipt.CreateWithAccountingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.receipt.CreateWithAccountingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.CreateWithAccountingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.receipt.CreateWithAccountingResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.CreateWithAccountingResponse} returns this
 */
proto.receipt.CreateWithAccountingResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.receipt.CreateWithoutAccountingRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.receipt.CreateWithoutAccountingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.receipt.CreateWithoutAccountingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.CreateWithoutAccountingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sellerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.receipt.ReceiptProduct.toObject, includeInstance),
    receiptingPointWithoutAccountingId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    receiptingPointWithoutAccountingType: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.receipt.CreateWithoutAccountingRequest}
 */
proto.receipt.CreateWithoutAccountingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.receipt.CreateWithoutAccountingRequest;
  return proto.receipt.CreateWithoutAccountingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.receipt.CreateWithoutAccountingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.receipt.CreateWithoutAccountingRequest}
 */
proto.receipt.CreateWithoutAccountingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSellerId(value);
      break;
    case 2:
      var value = new proto.receipt.ReceiptProduct;
      reader.readMessage(value,proto.receipt.ReceiptProduct.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceiptingPointWithoutAccountingId(value);
      break;
    case 4:
      var value = /** @type {!proto.tradingpoint.ReceiptingPointWithoutAccountingType} */ (reader.readEnum());
      msg.setReceiptingPointWithoutAccountingType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.receipt.CreateWithoutAccountingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.receipt.CreateWithoutAccountingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.CreateWithoutAccountingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSellerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.receipt.ReceiptProduct.serializeBinaryToWriter
    );
  }
  f = message.getReceiptingPointWithoutAccountingId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getReceiptingPointWithoutAccountingType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional int32 seller_id = 1;
 * @return {number}
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.getSellerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.CreateWithoutAccountingRequest} returns this
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.setSellerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ReceiptProduct products = 2;
 * @return {!Array<!proto.receipt.ReceiptProduct>}
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.receipt.ReceiptProduct>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.receipt.ReceiptProduct, 2));
};


/**
 * @param {!Array<!proto.receipt.ReceiptProduct>} value
 * @return {!proto.receipt.CreateWithoutAccountingRequest} returns this
*/
proto.receipt.CreateWithoutAccountingRequest.prototype.setProductsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.receipt.ReceiptProduct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.receipt.ReceiptProduct}
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.receipt.ReceiptProduct, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.receipt.CreateWithoutAccountingRequest} returns this
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.clearProductsList = function() {
  return this.setProductsList([]);
};


/**
 * optional int32 receipting_point_without_accounting_id = 3;
 * @return {number}
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.getReceiptingPointWithoutAccountingId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.CreateWithoutAccountingRequest} returns this
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.setReceiptingPointWithoutAccountingId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional tradingpoint.ReceiptingPointWithoutAccountingType receipting_point_without_accounting_type = 4;
 * @return {!proto.tradingpoint.ReceiptingPointWithoutAccountingType}
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.getReceiptingPointWithoutAccountingType = function() {
  return /** @type {!proto.tradingpoint.ReceiptingPointWithoutAccountingType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.tradingpoint.ReceiptingPointWithoutAccountingType} value
 * @return {!proto.receipt.CreateWithoutAccountingRequest} returns this
 */
proto.receipt.CreateWithoutAccountingRequest.prototype.setReceiptingPointWithoutAccountingType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.receipt.CreateWithoutAccountingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.receipt.CreateWithoutAccountingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.receipt.CreateWithoutAccountingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.CreateWithoutAccountingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.receipt.CreateWithoutAccountingResponse}
 */
proto.receipt.CreateWithoutAccountingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.receipt.CreateWithoutAccountingResponse;
  return proto.receipt.CreateWithoutAccountingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.receipt.CreateWithoutAccountingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.receipt.CreateWithoutAccountingResponse}
 */
proto.receipt.CreateWithoutAccountingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.receipt.CreateWithoutAccountingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.receipt.CreateWithoutAccountingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.receipt.CreateWithoutAccountingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.receipt.CreateWithoutAccountingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.receipt.CreateWithoutAccountingResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.receipt.CreateWithoutAccountingResponse} returns this
 */
proto.receipt.CreateWithoutAccountingResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.receipt.ReceiptType = {
  RECEIPT_TYPE_RECEIPT_WITH_ACCOUNTING: 0,
  RECEIPT_TYPE_RECEIPT_WITHOUT_ACCOUNTING: 1
};

goog.object.extend(exports, proto.receipt);
