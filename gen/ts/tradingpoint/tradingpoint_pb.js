// source: tradingpoint/tradingpoint.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var core_money_pb = require('../core/money_pb.js');
goog.object.extend(proto, core_money_pb);
goog.exportSymbol('proto.tradingpoint.AddHallRequest', null, global);
goog.exportSymbol('proto.tradingpoint.AddHallResponse', null, global);
goog.exportSymbol('proto.tradingpoint.AddSectionRequest', null, global);
goog.exportSymbol('proto.tradingpoint.AddSectionResponse', null, global);
goog.exportSymbol('proto.tradingpoint.DepartmentStore', null, global);
goog.exportSymbol('proto.tradingpoint.DepartmentStoreRequest', null, global);
goog.exportSymbol('proto.tradingpoint.DepartmentStoreResponse', null, global);
goog.exportSymbol('proto.tradingpoint.Hall', null, global);
goog.exportSymbol('proto.tradingpoint.HallContainer', null, global);
goog.exportSymbol('proto.tradingpoint.HallContainerType', null, global);
goog.exportSymbol('proto.tradingpoint.Kiosk', null, global);
goog.exportSymbol('proto.tradingpoint.KioskRequest', null, global);
goog.exportSymbol('proto.tradingpoint.KioskResponse', null, global);
goog.exportSymbol('proto.tradingpoint.ListRequest', null, global);
goog.exportSymbol('proto.tradingpoint.ListResponse', null, global);
goog.exportSymbol('proto.tradingpoint.PlaceOfWork', null, global);
goog.exportSymbol('proto.tradingpoint.PlaceOfWorkType', null, global);
goog.exportSymbol('proto.tradingpoint.ProductTradingPoint', null, global);
goog.exportSymbol('proto.tradingpoint.ReceiptingPointWithAccounting', null, global);
goog.exportSymbol('proto.tradingpoint.ReceiptingPointWithAccountingType', null, global);
goog.exportSymbol('proto.tradingpoint.ReceiptingPointWithoutAccounting', null, global);
goog.exportSymbol('proto.tradingpoint.ReceiptingPointWithoutAccountingType', null, global);
goog.exportSymbol('proto.tradingpoint.RegisterRequest', null, global);
goog.exportSymbol('proto.tradingpoint.RegisterResponse', null, global);
goog.exportSymbol('proto.tradingpoint.Section', null, global);
goog.exportSymbol('proto.tradingpoint.Store', null, global);
goog.exportSymbol('proto.tradingpoint.StoreRequest', null, global);
goog.exportSymbol('proto.tradingpoint.StoreResponse', null, global);
goog.exportSymbol('proto.tradingpoint.TradingPoint', null, global);
goog.exportSymbol('proto.tradingpoint.TradingPointType', null, global);
goog.exportSymbol('proto.tradingpoint.Tray', null, global);
goog.exportSymbol('proto.tradingpoint.TrayRequest', null, global);
goog.exportSymbol('proto.tradingpoint.TrayResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.TradingPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpoint.TradingPoint.repeatedFields_, null);
};
goog.inherits(proto.tradingpoint.TradingPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.TradingPoint.displayName = 'proto.tradingpoint.TradingPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.ProductTradingPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.ProductTradingPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.ProductTradingPoint.displayName = 'proto.tradingpoint.ProductTradingPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.PlaceOfWork = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.PlaceOfWork, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.PlaceOfWork.displayName = 'proto.tradingpoint.PlaceOfWork';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.HallContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.HallContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.HallContainer.displayName = 'proto.tradingpoint.HallContainer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.ReceiptingPointWithAccounting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.ReceiptingPointWithAccounting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.ReceiptingPointWithAccounting.displayName = 'proto.tradingpoint.ReceiptingPointWithAccounting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.ReceiptingPointWithoutAccounting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.ReceiptingPointWithoutAccounting.displayName = 'proto.tradingpoint.ReceiptingPointWithoutAccounting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.Hall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.Hall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.Hall.displayName = 'proto.tradingpoint.Hall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.Section = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.Section, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.Section.displayName = 'proto.tradingpoint.Section';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.DepartmentStore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpoint.DepartmentStore.repeatedFields_, null);
};
goog.inherits(proto.tradingpoint.DepartmentStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.DepartmentStore.displayName = 'proto.tradingpoint.DepartmentStore';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.Store = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpoint.Store.repeatedFields_, null);
};
goog.inherits(proto.tradingpoint.Store, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.Store.displayName = 'proto.tradingpoint.Store';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.Kiosk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.Kiosk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.Kiosk.displayName = 'proto.tradingpoint.Kiosk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.Tray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.Tray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.Tray.displayName = 'proto.tradingpoint.Tray';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.RegisterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.RegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.RegisterRequest.displayName = 'proto.tradingpoint.RegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.RegisterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.RegisterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.RegisterResponse.displayName = 'proto.tradingpoint.RegisterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.ListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.ListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.ListRequest.displayName = 'proto.tradingpoint.ListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.ListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpoint.ListResponse.repeatedFields_, null);
};
goog.inherits(proto.tradingpoint.ListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.ListResponse.displayName = 'proto.tradingpoint.ListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.AddSectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.AddSectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.AddSectionRequest.displayName = 'proto.tradingpoint.AddSectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.AddSectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.AddSectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.AddSectionResponse.displayName = 'proto.tradingpoint.AddSectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.AddHallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.AddHallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.AddHallRequest.displayName = 'proto.tradingpoint.AddHallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.AddHallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.AddHallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.AddHallResponse.displayName = 'proto.tradingpoint.AddHallResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.DepartmentStoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.DepartmentStoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.DepartmentStoreRequest.displayName = 'proto.tradingpoint.DepartmentStoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.DepartmentStoreResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.DepartmentStoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.DepartmentStoreResponse.displayName = 'proto.tradingpoint.DepartmentStoreResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.StoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.StoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.StoreRequest.displayName = 'proto.tradingpoint.StoreRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.StoreResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.StoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.StoreResponse.displayName = 'proto.tradingpoint.StoreResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.KioskRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.KioskRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.KioskRequest.displayName = 'proto.tradingpoint.KioskRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.KioskResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.KioskResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.KioskResponse.displayName = 'proto.tradingpoint.KioskResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.TrayRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.TrayRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.TrayRequest.displayName = 'proto.tradingpoint.TrayRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpoint.TrayResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpoint.TrayResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpoint.TrayResponse.displayName = 'proto.tradingpoint.TrayResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpoint.TradingPoint.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.TradingPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.TradingPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.TradingPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.TradingPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    areaPlot: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    rentalCharge: (f = msg.getRentalCharge()) && core_money_pb.Money.toObject(includeInstance, f),
    counterCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    address: jspb.Message.getFieldWithDefault(msg, 6, ""),
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.tradingpoint.ProductTradingPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.TradingPoint}
 */
proto.tradingpoint.TradingPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.TradingPoint;
  return proto.tradingpoint.TradingPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.TradingPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.TradingPoint}
 */
proto.tradingpoint.TradingPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpoint.TradingPointType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAreaPlot(value);
      break;
    case 4:
      var value = new core_money_pb.Money;
      reader.readMessage(value,core_money_pb.Money.deserializeBinaryFromReader);
      msg.setRentalCharge(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounterCount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 7:
      var value = new proto.tradingpoint.ProductTradingPoint;
      reader.readMessage(value,proto.tradingpoint.ProductTradingPoint.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.TradingPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.TradingPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.TradingPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.TradingPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAreaPlot();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getRentalCharge();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      core_money_pb.Money.serializeBinaryToWriter
    );
  }
  f = message.getCounterCount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.tradingpoint.ProductTradingPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.TradingPoint.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.TradingPoint} returns this
 */
proto.tradingpoint.TradingPoint.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TradingPointType type = 2;
 * @return {!proto.tradingpoint.TradingPointType}
 */
proto.tradingpoint.TradingPoint.prototype.getType = function() {
  return /** @type {!proto.tradingpoint.TradingPointType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpoint.TradingPointType} value
 * @return {!proto.tradingpoint.TradingPoint} returns this
 */
proto.tradingpoint.TradingPoint.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional double area_plot = 3;
 * @return {number}
 */
proto.tradingpoint.TradingPoint.prototype.getAreaPlot = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.TradingPoint} returns this
 */
proto.tradingpoint.TradingPoint.prototype.setAreaPlot = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional core.Money rental_charge = 4;
 * @return {?proto.core.Money}
 */
proto.tradingpoint.TradingPoint.prototype.getRentalCharge = function() {
  return /** @type{?proto.core.Money} */ (
    jspb.Message.getWrapperField(this, core_money_pb.Money, 4));
};


/**
 * @param {?proto.core.Money|undefined} value
 * @return {!proto.tradingpoint.TradingPoint} returns this
*/
proto.tradingpoint.TradingPoint.prototype.setRentalCharge = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.TradingPoint} returns this
 */
proto.tradingpoint.TradingPoint.prototype.clearRentalCharge = function() {
  return this.setRentalCharge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.TradingPoint.prototype.hasRentalCharge = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 counter_count = 5;
 * @return {number}
 */
proto.tradingpoint.TradingPoint.prototype.getCounterCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.TradingPoint} returns this
 */
proto.tradingpoint.TradingPoint.prototype.setCounterCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string address = 6;
 * @return {string}
 */
proto.tradingpoint.TradingPoint.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpoint.TradingPoint} returns this
 */
proto.tradingpoint.TradingPoint.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated ProductTradingPoint products = 7;
 * @return {!Array<!proto.tradingpoint.ProductTradingPoint>}
 */
proto.tradingpoint.TradingPoint.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.tradingpoint.ProductTradingPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpoint.ProductTradingPoint, 7));
};


/**
 * @param {!Array<!proto.tradingpoint.ProductTradingPoint>} value
 * @return {!proto.tradingpoint.TradingPoint} returns this
*/
proto.tradingpoint.TradingPoint.prototype.setProductsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.tradingpoint.ProductTradingPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpoint.ProductTradingPoint}
 */
proto.tradingpoint.TradingPoint.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.tradingpoint.ProductTradingPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpoint.TradingPoint} returns this
 */
proto.tradingpoint.TradingPoint.prototype.clearProductsList = function() {
  return this.setProductsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.ProductTradingPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.ProductTradingPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.ProductTradingPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.ProductTradingPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    quantity: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: (f = msg.getPrice()) && core_money_pb.Money.toObject(includeInstance, f),
    productId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.ProductTradingPoint}
 */
proto.tradingpoint.ProductTradingPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.ProductTradingPoint;
  return proto.tradingpoint.ProductTradingPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.ProductTradingPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.ProductTradingPoint}
 */
proto.tradingpoint.ProductTradingPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantity(value);
      break;
    case 2:
      var value = new core_money_pb.Money;
      reader.readMessage(value,core_money_pb.Money.deserializeBinaryFromReader);
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProductId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.ProductTradingPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.ProductTradingPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.ProductTradingPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.ProductTradingPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_money_pb.Money.serializeBinaryToWriter
    );
  }
  f = message.getProductId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 quantity = 1;
 * @return {number}
 */
proto.tradingpoint.ProductTradingPoint.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.ProductTradingPoint} returns this
 */
proto.tradingpoint.ProductTradingPoint.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional core.Money price = 2;
 * @return {?proto.core.Money}
 */
proto.tradingpoint.ProductTradingPoint.prototype.getPrice = function() {
  return /** @type{?proto.core.Money} */ (
    jspb.Message.getWrapperField(this, core_money_pb.Money, 2));
};


/**
 * @param {?proto.core.Money|undefined} value
 * @return {!proto.tradingpoint.ProductTradingPoint} returns this
*/
proto.tradingpoint.ProductTradingPoint.prototype.setPrice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.ProductTradingPoint} returns this
 */
proto.tradingpoint.ProductTradingPoint.prototype.clearPrice = function() {
  return this.setPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.ProductTradingPoint.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 product_id = 3;
 * @return {number}
 */
proto.tradingpoint.ProductTradingPoint.prototype.getProductId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.ProductTradingPoint} returns this
 */
proto.tradingpoint.ProductTradingPoint.prototype.setProductId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.PlaceOfWork.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.PlaceOfWork.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.PlaceOfWork} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.PlaceOfWork.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.PlaceOfWork}
 */
proto.tradingpoint.PlaceOfWork.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.PlaceOfWork;
  return proto.tradingpoint.PlaceOfWork.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.PlaceOfWork} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.PlaceOfWork}
 */
proto.tradingpoint.PlaceOfWork.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.PlaceOfWork.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.PlaceOfWork.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.PlaceOfWork} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.PlaceOfWork.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.PlaceOfWork.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.PlaceOfWork} returns this
 */
proto.tradingpoint.PlaceOfWork.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PlaceOfWorkType type = 2;
 * @return {!proto.tradingpoint.PlaceOfWorkType}
 */
proto.tradingpoint.PlaceOfWork.prototype.getType = function() {
  return /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpoint.PlaceOfWorkType} value
 * @return {!proto.tradingpoint.PlaceOfWork} returns this
 */
proto.tradingpoint.PlaceOfWork.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.HallContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.HallContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.HallContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.HallContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.HallContainer}
 */
proto.tradingpoint.HallContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.HallContainer;
  return proto.tradingpoint.HallContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.HallContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.HallContainer}
 */
proto.tradingpoint.HallContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpoint.HallContainerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.HallContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.HallContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.HallContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.HallContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.HallContainer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.HallContainer} returns this
 */
proto.tradingpoint.HallContainer.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional HallContainerType type = 2;
 * @return {!proto.tradingpoint.HallContainerType}
 */
proto.tradingpoint.HallContainer.prototype.getType = function() {
  return /** @type {!proto.tradingpoint.HallContainerType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpoint.HallContainerType} value
 * @return {!proto.tradingpoint.HallContainer} returns this
 */
proto.tradingpoint.HallContainer.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.ReceiptingPointWithAccounting.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.ReceiptingPointWithAccounting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.ReceiptingPointWithAccounting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.ReceiptingPointWithAccounting.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.ReceiptingPointWithAccounting}
 */
proto.tradingpoint.ReceiptingPointWithAccounting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.ReceiptingPointWithAccounting;
  return proto.tradingpoint.ReceiptingPointWithAccounting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.ReceiptingPointWithAccounting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.ReceiptingPointWithAccounting}
 */
proto.tradingpoint.ReceiptingPointWithAccounting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpoint.ReceiptingPointWithAccountingType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.ReceiptingPointWithAccounting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.ReceiptingPointWithAccounting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.ReceiptingPointWithAccounting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.ReceiptingPointWithAccounting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.ReceiptingPointWithAccounting.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.ReceiptingPointWithAccounting} returns this
 */
proto.tradingpoint.ReceiptingPointWithAccounting.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ReceiptingPointWithAccountingType type = 2;
 * @return {!proto.tradingpoint.ReceiptingPointWithAccountingType}
 */
proto.tradingpoint.ReceiptingPointWithAccounting.prototype.getType = function() {
  return /** @type {!proto.tradingpoint.ReceiptingPointWithAccountingType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpoint.ReceiptingPointWithAccountingType} value
 * @return {!proto.tradingpoint.ReceiptingPointWithAccounting} returns this
 */
proto.tradingpoint.ReceiptingPointWithAccounting.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.ReceiptingPointWithoutAccounting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.ReceiptingPointWithoutAccounting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.ReceiptingPointWithoutAccounting}
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.ReceiptingPointWithoutAccounting;
  return proto.tradingpoint.ReceiptingPointWithoutAccounting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.ReceiptingPointWithoutAccounting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.ReceiptingPointWithoutAccounting}
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpoint.ReceiptingPointWithoutAccountingType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.ReceiptingPointWithoutAccounting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.ReceiptingPointWithoutAccounting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.ReceiptingPointWithoutAccounting} returns this
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ReceiptingPointWithoutAccountingType type = 2;
 * @return {!proto.tradingpoint.ReceiptingPointWithoutAccountingType}
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting.prototype.getType = function() {
  return /** @type {!proto.tradingpoint.ReceiptingPointWithoutAccountingType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpoint.ReceiptingPointWithoutAccountingType} value
 * @return {!proto.tradingpoint.ReceiptingPointWithoutAccounting} returns this
 */
proto.tradingpoint.ReceiptingPointWithoutAccounting.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.Hall.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.Hall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.Hall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.Hall.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hallContainerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hallContainerType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tradingPointId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tradingPointType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.Hall}
 */
proto.tradingpoint.Hall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.Hall;
  return proto.tradingpoint.Hall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.Hall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.Hall}
 */
proto.tradingpoint.Hall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHallContainerId(value);
      break;
    case 3:
      var value = /** @type {!proto.tradingpoint.HallContainerType} */ (reader.readEnum());
      msg.setHallContainerType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradingPointId(value);
      break;
    case 5:
      var value = /** @type {!proto.tradingpoint.TradingPointType} */ (reader.readEnum());
      msg.setTradingPointType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.Hall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.Hall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.Hall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.Hall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHallContainerId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHallContainerType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTradingPointId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTradingPointType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.Hall.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.Hall} returns this
 */
proto.tradingpoint.Hall.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 hall_container_id = 2;
 * @return {number}
 */
proto.tradingpoint.Hall.prototype.getHallContainerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.Hall} returns this
 */
proto.tradingpoint.Hall.prototype.setHallContainerId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional HallContainerType hall_container_type = 3;
 * @return {!proto.tradingpoint.HallContainerType}
 */
proto.tradingpoint.Hall.prototype.getHallContainerType = function() {
  return /** @type {!proto.tradingpoint.HallContainerType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.tradingpoint.HallContainerType} value
 * @return {!proto.tradingpoint.Hall} returns this
 */
proto.tradingpoint.Hall.prototype.setHallContainerType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 trading_point_id = 4;
 * @return {number}
 */
proto.tradingpoint.Hall.prototype.getTradingPointId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.Hall} returns this
 */
proto.tradingpoint.Hall.prototype.setTradingPointId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional TradingPointType trading_point_type = 5;
 * @return {!proto.tradingpoint.TradingPointType}
 */
proto.tradingpoint.Hall.prototype.getTradingPointType = function() {
  return /** @type {!proto.tradingpoint.TradingPointType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.tradingpoint.TradingPointType} value
 * @return {!proto.tradingpoint.Hall} returns this
 */
proto.tradingpoint.Hall.prototype.setTradingPointType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.Section.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.Section.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.Section} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.Section.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    departmentStoreId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.Section}
 */
proto.tradingpoint.Section.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.Section;
  return proto.tradingpoint.Section.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.Section} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.Section}
 */
proto.tradingpoint.Section.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepartmentStoreId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.Section.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.Section.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.Section} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.Section.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDepartmentStoreId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.Section.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.Section} returns this
 */
proto.tradingpoint.Section.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 department_store_id = 2;
 * @return {number}
 */
proto.tradingpoint.Section.prototype.getDepartmentStoreId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.Section} returns this
 */
proto.tradingpoint.Section.prototype.setDepartmentStoreId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpoint.DepartmentStore.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.DepartmentStore.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.DepartmentStore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.DepartmentStore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.DepartmentStore.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradingPoint: (f = msg.getTradingPoint()) && proto.tradingpoint.TradingPoint.toObject(includeInstance, f),
    receiptingPointWithAccounting: (f = msg.getReceiptingPointWithAccounting()) && proto.tradingpoint.ReceiptingPointWithAccounting.toObject(includeInstance, f),
    sectionsList: jspb.Message.toObjectList(msg.getSectionsList(),
    proto.tradingpoint.Section.toObject, includeInstance),
    hallsList: jspb.Message.toObjectList(msg.getHallsList(),
    proto.tradingpoint.Hall.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.DepartmentStore}
 */
proto.tradingpoint.DepartmentStore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.DepartmentStore;
  return proto.tradingpoint.DepartmentStore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.DepartmentStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.DepartmentStore}
 */
proto.tradingpoint.DepartmentStore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.tradingpoint.TradingPoint;
      reader.readMessage(value,proto.tradingpoint.TradingPoint.deserializeBinaryFromReader);
      msg.setTradingPoint(value);
      break;
    case 3:
      var value = new proto.tradingpoint.ReceiptingPointWithAccounting;
      reader.readMessage(value,proto.tradingpoint.ReceiptingPointWithAccounting.deserializeBinaryFromReader);
      msg.setReceiptingPointWithAccounting(value);
      break;
    case 4:
      var value = new proto.tradingpoint.Section;
      reader.readMessage(value,proto.tradingpoint.Section.deserializeBinaryFromReader);
      msg.addSections(value);
      break;
    case 5:
      var value = new proto.tradingpoint.Hall;
      reader.readMessage(value,proto.tradingpoint.Hall.deserializeBinaryFromReader);
      msg.addHalls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.DepartmentStore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.DepartmentStore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.DepartmentStore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.DepartmentStore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradingPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tradingpoint.TradingPoint.serializeBinaryToWriter
    );
  }
  f = message.getReceiptingPointWithAccounting();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tradingpoint.ReceiptingPointWithAccounting.serializeBinaryToWriter
    );
  }
  f = message.getSectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.tradingpoint.Section.serializeBinaryToWriter
    );
  }
  f = message.getHallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tradingpoint.Hall.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.DepartmentStore.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.DepartmentStore} returns this
 */
proto.tradingpoint.DepartmentStore.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TradingPoint trading_point = 2;
 * @return {?proto.tradingpoint.TradingPoint}
 */
proto.tradingpoint.DepartmentStore.prototype.getTradingPoint = function() {
  return /** @type{?proto.tradingpoint.TradingPoint} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.TradingPoint, 2));
};


/**
 * @param {?proto.tradingpoint.TradingPoint|undefined} value
 * @return {!proto.tradingpoint.DepartmentStore} returns this
*/
proto.tradingpoint.DepartmentStore.prototype.setTradingPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.DepartmentStore} returns this
 */
proto.tradingpoint.DepartmentStore.prototype.clearTradingPoint = function() {
  return this.setTradingPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.DepartmentStore.prototype.hasTradingPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReceiptingPointWithAccounting receipting_point_with_accounting = 3;
 * @return {?proto.tradingpoint.ReceiptingPointWithAccounting}
 */
proto.tradingpoint.DepartmentStore.prototype.getReceiptingPointWithAccounting = function() {
  return /** @type{?proto.tradingpoint.ReceiptingPointWithAccounting} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.ReceiptingPointWithAccounting, 3));
};


/**
 * @param {?proto.tradingpoint.ReceiptingPointWithAccounting|undefined} value
 * @return {!proto.tradingpoint.DepartmentStore} returns this
*/
proto.tradingpoint.DepartmentStore.prototype.setReceiptingPointWithAccounting = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.DepartmentStore} returns this
 */
proto.tradingpoint.DepartmentStore.prototype.clearReceiptingPointWithAccounting = function() {
  return this.setReceiptingPointWithAccounting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.DepartmentStore.prototype.hasReceiptingPointWithAccounting = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Section sections = 4;
 * @return {!Array<!proto.tradingpoint.Section>}
 */
proto.tradingpoint.DepartmentStore.prototype.getSectionsList = function() {
  return /** @type{!Array<!proto.tradingpoint.Section>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpoint.Section, 4));
};


/**
 * @param {!Array<!proto.tradingpoint.Section>} value
 * @return {!proto.tradingpoint.DepartmentStore} returns this
*/
proto.tradingpoint.DepartmentStore.prototype.setSectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tradingpoint.Section=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpoint.Section}
 */
proto.tradingpoint.DepartmentStore.prototype.addSections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tradingpoint.Section, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpoint.DepartmentStore} returns this
 */
proto.tradingpoint.DepartmentStore.prototype.clearSectionsList = function() {
  return this.setSectionsList([]);
};


/**
 * repeated Hall halls = 5;
 * @return {!Array<!proto.tradingpoint.Hall>}
 */
proto.tradingpoint.DepartmentStore.prototype.getHallsList = function() {
  return /** @type{!Array<!proto.tradingpoint.Hall>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpoint.Hall, 5));
};


/**
 * @param {!Array<!proto.tradingpoint.Hall>} value
 * @return {!proto.tradingpoint.DepartmentStore} returns this
*/
proto.tradingpoint.DepartmentStore.prototype.setHallsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tradingpoint.Hall=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpoint.Hall}
 */
proto.tradingpoint.DepartmentStore.prototype.addHalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tradingpoint.Hall, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpoint.DepartmentStore} returns this
 */
proto.tradingpoint.DepartmentStore.prototype.clearHallsList = function() {
  return this.setHallsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpoint.Store.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.Store.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.Store.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.Store} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.Store.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradingPoint: (f = msg.getTradingPoint()) && proto.tradingpoint.TradingPoint.toObject(includeInstance, f),
    receiptingPointWithAccounting: (f = msg.getReceiptingPointWithAccounting()) && proto.tradingpoint.ReceiptingPointWithAccounting.toObject(includeInstance, f),
    hallContainer: (f = msg.getHallContainer()) && proto.tradingpoint.HallContainer.toObject(includeInstance, f),
    hallsList: jspb.Message.toObjectList(msg.getHallsList(),
    proto.tradingpoint.Hall.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.Store}
 */
proto.tradingpoint.Store.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.Store;
  return proto.tradingpoint.Store.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.Store} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.Store}
 */
proto.tradingpoint.Store.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.tradingpoint.TradingPoint;
      reader.readMessage(value,proto.tradingpoint.TradingPoint.deserializeBinaryFromReader);
      msg.setTradingPoint(value);
      break;
    case 3:
      var value = new proto.tradingpoint.ReceiptingPointWithAccounting;
      reader.readMessage(value,proto.tradingpoint.ReceiptingPointWithAccounting.deserializeBinaryFromReader);
      msg.setReceiptingPointWithAccounting(value);
      break;
    case 4:
      var value = new proto.tradingpoint.HallContainer;
      reader.readMessage(value,proto.tradingpoint.HallContainer.deserializeBinaryFromReader);
      msg.setHallContainer(value);
      break;
    case 5:
      var value = new proto.tradingpoint.Hall;
      reader.readMessage(value,proto.tradingpoint.Hall.deserializeBinaryFromReader);
      msg.addHalls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.Store.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.Store.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.Store} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.Store.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradingPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tradingpoint.TradingPoint.serializeBinaryToWriter
    );
  }
  f = message.getReceiptingPointWithAccounting();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tradingpoint.ReceiptingPointWithAccounting.serializeBinaryToWriter
    );
  }
  f = message.getHallContainer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tradingpoint.HallContainer.serializeBinaryToWriter
    );
  }
  f = message.getHallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tradingpoint.Hall.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.Store.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.Store} returns this
 */
proto.tradingpoint.Store.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TradingPoint trading_point = 2;
 * @return {?proto.tradingpoint.TradingPoint}
 */
proto.tradingpoint.Store.prototype.getTradingPoint = function() {
  return /** @type{?proto.tradingpoint.TradingPoint} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.TradingPoint, 2));
};


/**
 * @param {?proto.tradingpoint.TradingPoint|undefined} value
 * @return {!proto.tradingpoint.Store} returns this
*/
proto.tradingpoint.Store.prototype.setTradingPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.Store} returns this
 */
proto.tradingpoint.Store.prototype.clearTradingPoint = function() {
  return this.setTradingPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.Store.prototype.hasTradingPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReceiptingPointWithAccounting receipting_point_with_accounting = 3;
 * @return {?proto.tradingpoint.ReceiptingPointWithAccounting}
 */
proto.tradingpoint.Store.prototype.getReceiptingPointWithAccounting = function() {
  return /** @type{?proto.tradingpoint.ReceiptingPointWithAccounting} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.ReceiptingPointWithAccounting, 3));
};


/**
 * @param {?proto.tradingpoint.ReceiptingPointWithAccounting|undefined} value
 * @return {!proto.tradingpoint.Store} returns this
*/
proto.tradingpoint.Store.prototype.setReceiptingPointWithAccounting = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.Store} returns this
 */
proto.tradingpoint.Store.prototype.clearReceiptingPointWithAccounting = function() {
  return this.setReceiptingPointWithAccounting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.Store.prototype.hasReceiptingPointWithAccounting = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional HallContainer hall_container = 4;
 * @return {?proto.tradingpoint.HallContainer}
 */
proto.tradingpoint.Store.prototype.getHallContainer = function() {
  return /** @type{?proto.tradingpoint.HallContainer} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.HallContainer, 4));
};


/**
 * @param {?proto.tradingpoint.HallContainer|undefined} value
 * @return {!proto.tradingpoint.Store} returns this
*/
proto.tradingpoint.Store.prototype.setHallContainer = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.Store} returns this
 */
proto.tradingpoint.Store.prototype.clearHallContainer = function() {
  return this.setHallContainer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.Store.prototype.hasHallContainer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Hall halls = 5;
 * @return {!Array<!proto.tradingpoint.Hall>}
 */
proto.tradingpoint.Store.prototype.getHallsList = function() {
  return /** @type{!Array<!proto.tradingpoint.Hall>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpoint.Hall, 5));
};


/**
 * @param {!Array<!proto.tradingpoint.Hall>} value
 * @return {!proto.tradingpoint.Store} returns this
*/
proto.tradingpoint.Store.prototype.setHallsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tradingpoint.Hall=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpoint.Hall}
 */
proto.tradingpoint.Store.prototype.addHalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tradingpoint.Hall, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpoint.Store} returns this
 */
proto.tradingpoint.Store.prototype.clearHallsList = function() {
  return this.setHallsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.Kiosk.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.Kiosk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.Kiosk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.Kiosk.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradingPoint: (f = msg.getTradingPoint()) && proto.tradingpoint.TradingPoint.toObject(includeInstance, f),
    receiptingPointWithoutAccounting: (f = msg.getReceiptingPointWithoutAccounting()) && proto.tradingpoint.ReceiptingPointWithoutAccounting.toObject(includeInstance, f),
    placeOfWork: (f = msg.getPlaceOfWork()) && proto.tradingpoint.PlaceOfWork.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.Kiosk}
 */
proto.tradingpoint.Kiosk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.Kiosk;
  return proto.tradingpoint.Kiosk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.Kiosk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.Kiosk}
 */
proto.tradingpoint.Kiosk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.tradingpoint.TradingPoint;
      reader.readMessage(value,proto.tradingpoint.TradingPoint.deserializeBinaryFromReader);
      msg.setTradingPoint(value);
      break;
    case 3:
      var value = new proto.tradingpoint.ReceiptingPointWithoutAccounting;
      reader.readMessage(value,proto.tradingpoint.ReceiptingPointWithoutAccounting.deserializeBinaryFromReader);
      msg.setReceiptingPointWithoutAccounting(value);
      break;
    case 4:
      var value = new proto.tradingpoint.PlaceOfWork;
      reader.readMessage(value,proto.tradingpoint.PlaceOfWork.deserializeBinaryFromReader);
      msg.setPlaceOfWork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.Kiosk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.Kiosk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.Kiosk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.Kiosk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradingPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tradingpoint.TradingPoint.serializeBinaryToWriter
    );
  }
  f = message.getReceiptingPointWithoutAccounting();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tradingpoint.ReceiptingPointWithoutAccounting.serializeBinaryToWriter
    );
  }
  f = message.getPlaceOfWork();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tradingpoint.PlaceOfWork.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.Kiosk.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.Kiosk} returns this
 */
proto.tradingpoint.Kiosk.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TradingPoint trading_point = 2;
 * @return {?proto.tradingpoint.TradingPoint}
 */
proto.tradingpoint.Kiosk.prototype.getTradingPoint = function() {
  return /** @type{?proto.tradingpoint.TradingPoint} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.TradingPoint, 2));
};


/**
 * @param {?proto.tradingpoint.TradingPoint|undefined} value
 * @return {!proto.tradingpoint.Kiosk} returns this
*/
proto.tradingpoint.Kiosk.prototype.setTradingPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.Kiosk} returns this
 */
proto.tradingpoint.Kiosk.prototype.clearTradingPoint = function() {
  return this.setTradingPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.Kiosk.prototype.hasTradingPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReceiptingPointWithoutAccounting receipting_point_without_accounting = 3;
 * @return {?proto.tradingpoint.ReceiptingPointWithoutAccounting}
 */
proto.tradingpoint.Kiosk.prototype.getReceiptingPointWithoutAccounting = function() {
  return /** @type{?proto.tradingpoint.ReceiptingPointWithoutAccounting} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.ReceiptingPointWithoutAccounting, 3));
};


/**
 * @param {?proto.tradingpoint.ReceiptingPointWithoutAccounting|undefined} value
 * @return {!proto.tradingpoint.Kiosk} returns this
*/
proto.tradingpoint.Kiosk.prototype.setReceiptingPointWithoutAccounting = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.Kiosk} returns this
 */
proto.tradingpoint.Kiosk.prototype.clearReceiptingPointWithoutAccounting = function() {
  return this.setReceiptingPointWithoutAccounting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.Kiosk.prototype.hasReceiptingPointWithoutAccounting = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PlaceOfWork place_of_work = 4;
 * @return {?proto.tradingpoint.PlaceOfWork}
 */
proto.tradingpoint.Kiosk.prototype.getPlaceOfWork = function() {
  return /** @type{?proto.tradingpoint.PlaceOfWork} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.PlaceOfWork, 4));
};


/**
 * @param {?proto.tradingpoint.PlaceOfWork|undefined} value
 * @return {!proto.tradingpoint.Kiosk} returns this
*/
proto.tradingpoint.Kiosk.prototype.setPlaceOfWork = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.Kiosk} returns this
 */
proto.tradingpoint.Kiosk.prototype.clearPlaceOfWork = function() {
  return this.setPlaceOfWork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.Kiosk.prototype.hasPlaceOfWork = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.Tray.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.Tray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.Tray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.Tray.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradingPoint: (f = msg.getTradingPoint()) && proto.tradingpoint.TradingPoint.toObject(includeInstance, f),
    receiptingPointWithoutAccounting: (f = msg.getReceiptingPointWithoutAccounting()) && proto.tradingpoint.ReceiptingPointWithoutAccounting.toObject(includeInstance, f),
    placeOfWork: (f = msg.getPlaceOfWork()) && proto.tradingpoint.PlaceOfWork.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.Tray}
 */
proto.tradingpoint.Tray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.Tray;
  return proto.tradingpoint.Tray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.Tray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.Tray}
 */
proto.tradingpoint.Tray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.tradingpoint.TradingPoint;
      reader.readMessage(value,proto.tradingpoint.TradingPoint.deserializeBinaryFromReader);
      msg.setTradingPoint(value);
      break;
    case 3:
      var value = new proto.tradingpoint.ReceiptingPointWithoutAccounting;
      reader.readMessage(value,proto.tradingpoint.ReceiptingPointWithoutAccounting.deserializeBinaryFromReader);
      msg.setReceiptingPointWithoutAccounting(value);
      break;
    case 4:
      var value = new proto.tradingpoint.PlaceOfWork;
      reader.readMessage(value,proto.tradingpoint.PlaceOfWork.deserializeBinaryFromReader);
      msg.setPlaceOfWork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.Tray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.Tray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.Tray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.Tray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradingPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tradingpoint.TradingPoint.serializeBinaryToWriter
    );
  }
  f = message.getReceiptingPointWithoutAccounting();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tradingpoint.ReceiptingPointWithoutAccounting.serializeBinaryToWriter
    );
  }
  f = message.getPlaceOfWork();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tradingpoint.PlaceOfWork.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.Tray.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.Tray} returns this
 */
proto.tradingpoint.Tray.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TradingPoint trading_point = 2;
 * @return {?proto.tradingpoint.TradingPoint}
 */
proto.tradingpoint.Tray.prototype.getTradingPoint = function() {
  return /** @type{?proto.tradingpoint.TradingPoint} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.TradingPoint, 2));
};


/**
 * @param {?proto.tradingpoint.TradingPoint|undefined} value
 * @return {!proto.tradingpoint.Tray} returns this
*/
proto.tradingpoint.Tray.prototype.setTradingPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.Tray} returns this
 */
proto.tradingpoint.Tray.prototype.clearTradingPoint = function() {
  return this.setTradingPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.Tray.prototype.hasTradingPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReceiptingPointWithoutAccounting receipting_point_without_accounting = 3;
 * @return {?proto.tradingpoint.ReceiptingPointWithoutAccounting}
 */
proto.tradingpoint.Tray.prototype.getReceiptingPointWithoutAccounting = function() {
  return /** @type{?proto.tradingpoint.ReceiptingPointWithoutAccounting} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.ReceiptingPointWithoutAccounting, 3));
};


/**
 * @param {?proto.tradingpoint.ReceiptingPointWithoutAccounting|undefined} value
 * @return {!proto.tradingpoint.Tray} returns this
*/
proto.tradingpoint.Tray.prototype.setReceiptingPointWithoutAccounting = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.Tray} returns this
 */
proto.tradingpoint.Tray.prototype.clearReceiptingPointWithoutAccounting = function() {
  return this.setReceiptingPointWithoutAccounting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.Tray.prototype.hasReceiptingPointWithoutAccounting = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PlaceOfWork place_of_work = 4;
 * @return {?proto.tradingpoint.PlaceOfWork}
 */
proto.tradingpoint.Tray.prototype.getPlaceOfWork = function() {
  return /** @type{?proto.tradingpoint.PlaceOfWork} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.PlaceOfWork, 4));
};


/**
 * @param {?proto.tradingpoint.PlaceOfWork|undefined} value
 * @return {!proto.tradingpoint.Tray} returns this
*/
proto.tradingpoint.Tray.prototype.setPlaceOfWork = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.Tray} returns this
 */
proto.tradingpoint.Tray.prototype.clearPlaceOfWork = function() {
  return this.setPlaceOfWork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.Tray.prototype.hasPlaceOfWork = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.RegisterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.RegisterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.RegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.RegisterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    areaPlot: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    rentalCharge: (f = msg.getRentalCharge()) && core_money_pb.Money.toObject(includeInstance, f),
    counterCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    address: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.RegisterRequest}
 */
proto.tradingpoint.RegisterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.RegisterRequest;
  return proto.tradingpoint.RegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.RegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.RegisterRequest}
 */
proto.tradingpoint.RegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tradingpoint.TradingPointType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAreaPlot(value);
      break;
    case 3:
      var value = new core_money_pb.Money;
      reader.readMessage(value,core_money_pb.Money.deserializeBinaryFromReader);
      msg.setRentalCharge(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCounterCount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.RegisterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.RegisterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.RegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.RegisterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAreaPlot();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getRentalCharge();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_money_pb.Money.serializeBinaryToWriter
    );
  }
  f = message.getCounterCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional TradingPointType type = 1;
 * @return {!proto.tradingpoint.TradingPointType}
 */
proto.tradingpoint.RegisterRequest.prototype.getType = function() {
  return /** @type {!proto.tradingpoint.TradingPointType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.tradingpoint.TradingPointType} value
 * @return {!proto.tradingpoint.RegisterRequest} returns this
 */
proto.tradingpoint.RegisterRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double area_plot = 2;
 * @return {number}
 */
proto.tradingpoint.RegisterRequest.prototype.getAreaPlot = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.RegisterRequest} returns this
 */
proto.tradingpoint.RegisterRequest.prototype.setAreaPlot = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional core.Money rental_charge = 3;
 * @return {?proto.core.Money}
 */
proto.tradingpoint.RegisterRequest.prototype.getRentalCharge = function() {
  return /** @type{?proto.core.Money} */ (
    jspb.Message.getWrapperField(this, core_money_pb.Money, 3));
};


/**
 * @param {?proto.core.Money|undefined} value
 * @return {!proto.tradingpoint.RegisterRequest} returns this
*/
proto.tradingpoint.RegisterRequest.prototype.setRentalCharge = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.RegisterRequest} returns this
 */
proto.tradingpoint.RegisterRequest.prototype.clearRentalCharge = function() {
  return this.setRentalCharge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.RegisterRequest.prototype.hasRentalCharge = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 counter_count = 4;
 * @return {number}
 */
proto.tradingpoint.RegisterRequest.prototype.getCounterCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.RegisterRequest} returns this
 */
proto.tradingpoint.RegisterRequest.prototype.setCounterCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string address = 5;
 * @return {string}
 */
proto.tradingpoint.RegisterRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpoint.RegisterRequest} returns this
 */
proto.tradingpoint.RegisterRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.RegisterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.RegisterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.RegisterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.RegisterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.RegisterResponse}
 */
proto.tradingpoint.RegisterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.RegisterResponse;
  return proto.tradingpoint.RegisterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.RegisterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.RegisterResponse}
 */
proto.tradingpoint.RegisterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.RegisterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.RegisterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.RegisterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.RegisterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.RegisterResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.RegisterResponse} returns this
 */
proto.tradingpoint.RegisterResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.ListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.ListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.ListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.ListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.ListRequest}
 */
proto.tradingpoint.ListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.ListRequest;
  return proto.tradingpoint.ListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.ListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.ListRequest}
 */
proto.tradingpoint.ListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.ListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.ListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.ListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.ListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpoint.ListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.ListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.ListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.ListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.ListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradingPointsList: jspb.Message.toObjectList(msg.getTradingPointsList(),
    proto.tradingpoint.TradingPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.ListResponse}
 */
proto.tradingpoint.ListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.ListResponse;
  return proto.tradingpoint.ListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.ListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.ListResponse}
 */
proto.tradingpoint.ListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpoint.TradingPoint;
      reader.readMessage(value,proto.tradingpoint.TradingPoint.deserializeBinaryFromReader);
      msg.addTradingPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.ListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.ListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.ListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.ListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradingPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tradingpoint.TradingPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TradingPoint trading_points = 1;
 * @return {!Array<!proto.tradingpoint.TradingPoint>}
 */
proto.tradingpoint.ListResponse.prototype.getTradingPointsList = function() {
  return /** @type{!Array<!proto.tradingpoint.TradingPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpoint.TradingPoint, 1));
};


/**
 * @param {!Array<!proto.tradingpoint.TradingPoint>} value
 * @return {!proto.tradingpoint.ListResponse} returns this
*/
proto.tradingpoint.ListResponse.prototype.setTradingPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tradingpoint.TradingPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpoint.TradingPoint}
 */
proto.tradingpoint.ListResponse.prototype.addTradingPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tradingpoint.TradingPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpoint.ListResponse} returns this
 */
proto.tradingpoint.ListResponse.prototype.clearTradingPointsList = function() {
  return this.setTradingPointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.AddSectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.AddSectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.AddSectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.AddSectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    departmentStoreId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.AddSectionRequest}
 */
proto.tradingpoint.AddSectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.AddSectionRequest;
  return proto.tradingpoint.AddSectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.AddSectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.AddSectionRequest}
 */
proto.tradingpoint.AddSectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepartmentStoreId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.AddSectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.AddSectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.AddSectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.AddSectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepartmentStoreId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 department_store_id = 1;
 * @return {number}
 */
proto.tradingpoint.AddSectionRequest.prototype.getDepartmentStoreId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.AddSectionRequest} returns this
 */
proto.tradingpoint.AddSectionRequest.prototype.setDepartmentStoreId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.AddSectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.AddSectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.AddSectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.AddSectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.AddSectionResponse}
 */
proto.tradingpoint.AddSectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.AddSectionResponse;
  return proto.tradingpoint.AddSectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.AddSectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.AddSectionResponse}
 */
proto.tradingpoint.AddSectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.AddSectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.AddSectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.AddSectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.AddSectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.AddSectionResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.AddSectionResponse} returns this
 */
proto.tradingpoint.AddSectionResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.AddHallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.AddHallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.AddHallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.AddHallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hallContainerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hallContainerType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tradingPointId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tradingPointType: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.AddHallRequest}
 */
proto.tradingpoint.AddHallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.AddHallRequest;
  return proto.tradingpoint.AddHallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.AddHallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.AddHallRequest}
 */
proto.tradingpoint.AddHallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHallContainerId(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpoint.HallContainerType} */ (reader.readEnum());
      msg.setHallContainerType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradingPointId(value);
      break;
    case 4:
      var value = /** @type {!proto.tradingpoint.TradingPointType} */ (reader.readEnum());
      msg.setTradingPointType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.AddHallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.AddHallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.AddHallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.AddHallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHallContainerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHallContainerType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTradingPointId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTradingPointType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional int32 hall_container_id = 1;
 * @return {number}
 */
proto.tradingpoint.AddHallRequest.prototype.getHallContainerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.AddHallRequest} returns this
 */
proto.tradingpoint.AddHallRequest.prototype.setHallContainerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional HallContainerType hall_container_type = 2;
 * @return {!proto.tradingpoint.HallContainerType}
 */
proto.tradingpoint.AddHallRequest.prototype.getHallContainerType = function() {
  return /** @type {!proto.tradingpoint.HallContainerType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpoint.HallContainerType} value
 * @return {!proto.tradingpoint.AddHallRequest} returns this
 */
proto.tradingpoint.AddHallRequest.prototype.setHallContainerType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 trading_point_id = 3;
 * @return {number}
 */
proto.tradingpoint.AddHallRequest.prototype.getTradingPointId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.AddHallRequest} returns this
 */
proto.tradingpoint.AddHallRequest.prototype.setTradingPointId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional TradingPointType trading_point_type = 4;
 * @return {!proto.tradingpoint.TradingPointType}
 */
proto.tradingpoint.AddHallRequest.prototype.getTradingPointType = function() {
  return /** @type {!proto.tradingpoint.TradingPointType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.tradingpoint.TradingPointType} value
 * @return {!proto.tradingpoint.AddHallRequest} returns this
 */
proto.tradingpoint.AddHallRequest.prototype.setTradingPointType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.AddHallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.AddHallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.AddHallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.AddHallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.AddHallResponse}
 */
proto.tradingpoint.AddHallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.AddHallResponse;
  return proto.tradingpoint.AddHallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.AddHallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.AddHallResponse}
 */
proto.tradingpoint.AddHallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.AddHallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.AddHallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.AddHallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.AddHallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.AddHallResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.AddHallResponse} returns this
 */
proto.tradingpoint.AddHallResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.DepartmentStoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.DepartmentStoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.DepartmentStoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.DepartmentStoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.DepartmentStoreRequest}
 */
proto.tradingpoint.DepartmentStoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.DepartmentStoreRequest;
  return proto.tradingpoint.DepartmentStoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.DepartmentStoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.DepartmentStoreRequest}
 */
proto.tradingpoint.DepartmentStoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.DepartmentStoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.DepartmentStoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.DepartmentStoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.DepartmentStoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.DepartmentStoreRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.DepartmentStoreRequest} returns this
 */
proto.tradingpoint.DepartmentStoreRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.DepartmentStoreResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.DepartmentStoreResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.DepartmentStoreResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.DepartmentStoreResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    departmentStore: (f = msg.getDepartmentStore()) && proto.tradingpoint.DepartmentStore.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.DepartmentStoreResponse}
 */
proto.tradingpoint.DepartmentStoreResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.DepartmentStoreResponse;
  return proto.tradingpoint.DepartmentStoreResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.DepartmentStoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.DepartmentStoreResponse}
 */
proto.tradingpoint.DepartmentStoreResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpoint.DepartmentStore;
      reader.readMessage(value,proto.tradingpoint.DepartmentStore.deserializeBinaryFromReader);
      msg.setDepartmentStore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.DepartmentStoreResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.DepartmentStoreResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.DepartmentStoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.DepartmentStoreResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepartmentStore();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tradingpoint.DepartmentStore.serializeBinaryToWriter
    );
  }
};


/**
 * optional DepartmentStore department_store = 1;
 * @return {?proto.tradingpoint.DepartmentStore}
 */
proto.tradingpoint.DepartmentStoreResponse.prototype.getDepartmentStore = function() {
  return /** @type{?proto.tradingpoint.DepartmentStore} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.DepartmentStore, 1));
};


/**
 * @param {?proto.tradingpoint.DepartmentStore|undefined} value
 * @return {!proto.tradingpoint.DepartmentStoreResponse} returns this
*/
proto.tradingpoint.DepartmentStoreResponse.prototype.setDepartmentStore = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.DepartmentStoreResponse} returns this
 */
proto.tradingpoint.DepartmentStoreResponse.prototype.clearDepartmentStore = function() {
  return this.setDepartmentStore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.DepartmentStoreResponse.prototype.hasDepartmentStore = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.StoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.StoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.StoreRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.StoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.StoreRequest}
 */
proto.tradingpoint.StoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.StoreRequest;
  return proto.tradingpoint.StoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.StoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.StoreRequest}
 */
proto.tradingpoint.StoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.StoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.StoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.StoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.StoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.StoreRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.StoreRequest} returns this
 */
proto.tradingpoint.StoreRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.StoreResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.StoreResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.StoreResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.StoreResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    store: (f = msg.getStore()) && proto.tradingpoint.Store.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.StoreResponse}
 */
proto.tradingpoint.StoreResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.StoreResponse;
  return proto.tradingpoint.StoreResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.StoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.StoreResponse}
 */
proto.tradingpoint.StoreResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpoint.Store;
      reader.readMessage(value,proto.tradingpoint.Store.deserializeBinaryFromReader);
      msg.setStore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.StoreResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.StoreResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.StoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.StoreResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStore();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tradingpoint.Store.serializeBinaryToWriter
    );
  }
};


/**
 * optional Store store = 1;
 * @return {?proto.tradingpoint.Store}
 */
proto.tradingpoint.StoreResponse.prototype.getStore = function() {
  return /** @type{?proto.tradingpoint.Store} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.Store, 1));
};


/**
 * @param {?proto.tradingpoint.Store|undefined} value
 * @return {!proto.tradingpoint.StoreResponse} returns this
*/
proto.tradingpoint.StoreResponse.prototype.setStore = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.StoreResponse} returns this
 */
proto.tradingpoint.StoreResponse.prototype.clearStore = function() {
  return this.setStore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.StoreResponse.prototype.hasStore = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.KioskRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.KioskRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.KioskRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.KioskRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.KioskRequest}
 */
proto.tradingpoint.KioskRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.KioskRequest;
  return proto.tradingpoint.KioskRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.KioskRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.KioskRequest}
 */
proto.tradingpoint.KioskRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.KioskRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.KioskRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.KioskRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.KioskRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.KioskRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.KioskRequest} returns this
 */
proto.tradingpoint.KioskRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.KioskResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.KioskResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.KioskResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.KioskResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    kiosk: (f = msg.getKiosk()) && proto.tradingpoint.Kiosk.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.KioskResponse}
 */
proto.tradingpoint.KioskResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.KioskResponse;
  return proto.tradingpoint.KioskResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.KioskResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.KioskResponse}
 */
proto.tradingpoint.KioskResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpoint.Kiosk;
      reader.readMessage(value,proto.tradingpoint.Kiosk.deserializeBinaryFromReader);
      msg.setKiosk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.KioskResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.KioskResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.KioskResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.KioskResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKiosk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tradingpoint.Kiosk.serializeBinaryToWriter
    );
  }
};


/**
 * optional Kiosk kiosk = 1;
 * @return {?proto.tradingpoint.Kiosk}
 */
proto.tradingpoint.KioskResponse.prototype.getKiosk = function() {
  return /** @type{?proto.tradingpoint.Kiosk} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.Kiosk, 1));
};


/**
 * @param {?proto.tradingpoint.Kiosk|undefined} value
 * @return {!proto.tradingpoint.KioskResponse} returns this
*/
proto.tradingpoint.KioskResponse.prototype.setKiosk = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.KioskResponse} returns this
 */
proto.tradingpoint.KioskResponse.prototype.clearKiosk = function() {
  return this.setKiosk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.KioskResponse.prototype.hasKiosk = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.TrayRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.TrayRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.TrayRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.TrayRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.TrayRequest}
 */
proto.tradingpoint.TrayRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.TrayRequest;
  return proto.tradingpoint.TrayRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.TrayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.TrayRequest}
 */
proto.tradingpoint.TrayRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.TrayRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.TrayRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.TrayRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.TrayRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.tradingpoint.TrayRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpoint.TrayRequest} returns this
 */
proto.tradingpoint.TrayRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpoint.TrayResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpoint.TrayResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpoint.TrayResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.TrayResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tray: (f = msg.getTray()) && proto.tradingpoint.Tray.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpoint.TrayResponse}
 */
proto.tradingpoint.TrayResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpoint.TrayResponse;
  return proto.tradingpoint.TrayResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpoint.TrayResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpoint.TrayResponse}
 */
proto.tradingpoint.TrayResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpoint.Tray;
      reader.readMessage(value,proto.tradingpoint.Tray.deserializeBinaryFromReader);
      msg.setTray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpoint.TrayResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpoint.TrayResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpoint.TrayResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpoint.TrayResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTray();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tradingpoint.Tray.serializeBinaryToWriter
    );
  }
};


/**
 * optional Tray tray = 1;
 * @return {?proto.tradingpoint.Tray}
 */
proto.tradingpoint.TrayResponse.prototype.getTray = function() {
  return /** @type{?proto.tradingpoint.Tray} */ (
    jspb.Message.getWrapperField(this, proto.tradingpoint.Tray, 1));
};


/**
 * @param {?proto.tradingpoint.Tray|undefined} value
 * @return {!proto.tradingpoint.TrayResponse} returns this
*/
proto.tradingpoint.TrayResponse.prototype.setTray = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpoint.TrayResponse} returns this
 */
proto.tradingpoint.TrayResponse.prototype.clearTray = function() {
  return this.setTray(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpoint.TrayResponse.prototype.hasTray = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.tradingpoint.TradingPointType = {
  TRADING_POINT_STORE: 0,
  TRADING_POINT_DEPARTMENT_STORE: 1,
  TRADING_POINT_KIOSK: 2,
  TRADING_POINT_TRAY: 3
};

/**
 * @enum {number}
 */
proto.tradingpoint.PlaceOfWorkType = {
  PLACE_OF_WORK_HALL: 0,
  PLACE_OF_WORK_KIOSK: 1,
  PLACE_OF_WORK_TRAY: 2
};

/**
 * @enum {number}
 */
proto.tradingpoint.HallContainerType = {
  HALL_CONTAINER_SECTION: 0,
  HALL_CONTAINER_STORE: 1
};

/**
 * @enum {number}
 */
proto.tradingpoint.ReceiptingPointWithAccountingType = {
  RECEIPTING_POINT_WITH_ACCOUNTING_DEPARTMENT_STORE: 0,
  RECEIPTING_POINT_WITH_ACCOUNTING_STORE: 1
};

/**
 * @enum {number}
 */
proto.tradingpoint.ReceiptingPointWithoutAccountingType = {
  RECEIPTING_POINT_WITHOUT_ACCOUNTING_KIOSK: 0,
  RECEIPTING_POINT_WITHOUT_ACCOUNTING_TRAY: 1
};

goog.object.extend(exports, proto.tradingpoint);
