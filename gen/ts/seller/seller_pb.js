// source: seller/seller.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var core_money_pb = require('../core/money_pb.js');
goog.object.extend(proto, core_money_pb);
var core_date_pb = require('../core/date_pb.js');
goog.object.extend(proto, core_date_pb);
var tradingpoint_trading_point_pb = require('../tradingpoint/trading_point_pb.js');
goog.object.extend(proto, tradingpoint_trading_point_pb);
goog.exportSymbol('proto.seller.ListByTradingPointRequest', null, global);
goog.exportSymbol('proto.seller.ListByTradingPointResponse', null, global);
goog.exportSymbol('proto.seller.RegisterRequest', null, global);
goog.exportSymbol('proto.seller.RegisterResponse', null, global);
goog.exportSymbol('proto.seller.Seller', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.Seller = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.Seller, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.Seller.displayName = 'proto.seller.Seller';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.RegisterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.RegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.RegisterRequest.displayName = 'proto.seller.RegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.RegisterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.RegisterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.RegisterResponse.displayName = 'proto.seller.RegisterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.ListByTradingPointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.ListByTradingPointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.ListByTradingPointRequest.displayName = 'proto.seller.ListByTradingPointRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.ListByTradingPointResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seller.ListByTradingPointResponse.repeatedFields_, null);
};
goog.inherits(proto.seller.ListByTradingPointResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.ListByTradingPointResponse.displayName = 'proto.seller.ListByTradingPointResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.Seller.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.Seller.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.Seller} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.Seller.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    firstName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    middleName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    birthDate: (f = msg.getBirthDate()) && core_date_pb.Date.toObject(includeInstance, f),
    salary: (f = msg.getSalary()) && core_money_pb.Money.toObject(includeInstance, f),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 7, ""),
    placeOfWorkId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    placeOfWorkType: jspb.Message.getFieldWithDefault(msg, 9, 0),
    tradingPointId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    tradingPointType: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.Seller}
 */
proto.seller.Seller.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.Seller;
  return proto.seller.Seller.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.Seller} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.Seller}
 */
proto.seller.Seller.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiddleName(value);
      break;
    case 5:
      var value = new core_date_pb.Date;
      reader.readMessage(value,core_date_pb.Date.deserializeBinaryFromReader);
      msg.setBirthDate(value);
      break;
    case 6:
      var value = new core_money_pb.Money;
      reader.readMessage(value,core_money_pb.Money.deserializeBinaryFromReader);
      msg.setSalary(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaceOfWorkId(value);
      break;
    case 9:
      var value = /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (reader.readEnum());
      msg.setPlaceOfWorkType(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradingPointId(value);
      break;
    case 11:
      var value = /** @type {!proto.tradingpoint.TradingPointType} */ (reader.readEnum());
      msg.setTradingPointType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.Seller.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.Seller.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.Seller} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.Seller.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMiddleName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBirthDate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      core_date_pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getSalary();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      core_money_pb.Money.serializeBinaryToWriter
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPlaceOfWorkId();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getPlaceOfWorkType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getTradingPointId();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTradingPointType();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.seller.Seller.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string first_name = 2;
 * @return {string}
 */
proto.seller.Seller.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string last_name = 3;
 * @return {string}
 */
proto.seller.Seller.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string middle_name = 4;
 * @return {string}
 */
proto.seller.Seller.prototype.getMiddleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setMiddleName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional core.Date birth_date = 5;
 * @return {?proto.core.Date}
 */
proto.seller.Seller.prototype.getBirthDate = function() {
  return /** @type{?proto.core.Date} */ (
    jspb.Message.getWrapperField(this, core_date_pb.Date, 5));
};


/**
 * @param {?proto.core.Date|undefined} value
 * @return {!proto.seller.Seller} returns this
*/
proto.seller.Seller.prototype.setBirthDate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.clearBirthDate = function() {
  return this.setBirthDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.Seller.prototype.hasBirthDate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional core.Money salary = 6;
 * @return {?proto.core.Money}
 */
proto.seller.Seller.prototype.getSalary = function() {
  return /** @type{?proto.core.Money} */ (
    jspb.Message.getWrapperField(this, core_money_pb.Money, 6));
};


/**
 * @param {?proto.core.Money|undefined} value
 * @return {!proto.seller.Seller} returns this
*/
proto.seller.Seller.prototype.setSalary = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.clearSalary = function() {
  return this.setSalary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.Seller.prototype.hasSalary = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string phone_number = 7;
 * @return {string}
 */
proto.seller.Seller.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 place_of_work_id = 8;
 * @return {number}
 */
proto.seller.Seller.prototype.getPlaceOfWorkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setPlaceOfWorkId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional tradingpoint.PlaceOfWorkType place_of_work_type = 9;
 * @return {!proto.tradingpoint.PlaceOfWorkType}
 */
proto.seller.Seller.prototype.getPlaceOfWorkType = function() {
  return /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.tradingpoint.PlaceOfWorkType} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setPlaceOfWorkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional int32 trading_point_id = 10;
 * @return {number}
 */
proto.seller.Seller.prototype.getTradingPointId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setTradingPointId = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional tradingpoint.TradingPointType trading_point_type = 11;
 * @return {!proto.tradingpoint.TradingPointType}
 */
proto.seller.Seller.prototype.getTradingPointType = function() {
  return /** @type {!proto.tradingpoint.TradingPointType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.tradingpoint.TradingPointType} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setTradingPointType = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.RegisterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.RegisterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.RegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.RegisterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    middleName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    birthDate: (f = msg.getBirthDate()) && core_date_pb.Date.toObject(includeInstance, f),
    salary: (f = msg.getSalary()) && core_money_pb.Money.toObject(includeInstance, f),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 6, ""),
    placeOfWorkId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    placeOfWorkType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tradingPointId: jspb.Message.getFieldWithDefault(msg, 9, 0),
    tradingPointType: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.RegisterRequest}
 */
proto.seller.RegisterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.RegisterRequest;
  return proto.seller.RegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.RegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.RegisterRequest}
 */
proto.seller.RegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiddleName(value);
      break;
    case 4:
      var value = new core_date_pb.Date;
      reader.readMessage(value,core_date_pb.Date.deserializeBinaryFromReader);
      msg.setBirthDate(value);
      break;
    case 5:
      var value = new core_money_pb.Money;
      reader.readMessage(value,core_money_pb.Money.deserializeBinaryFromReader);
      msg.setSalary(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaceOfWorkId(value);
      break;
    case 8:
      var value = /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (reader.readEnum());
      msg.setPlaceOfWorkType(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradingPointId(value);
      break;
    case 10:
      var value = /** @type {!proto.tradingpoint.TradingPointType} */ (reader.readEnum());
      msg.setTradingPointType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.RegisterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.RegisterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.RegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.RegisterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMiddleName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBirthDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      core_date_pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getSalary();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      core_money_pb.Money.serializeBinaryToWriter
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPlaceOfWorkId();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPlaceOfWorkType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getTradingPointId();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getTradingPointType();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.seller.RegisterRequest.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.seller.RegisterRequest.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string middle_name = 3;
 * @return {string}
 */
proto.seller.RegisterRequest.prototype.getMiddleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setMiddleName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional core.Date birth_date = 4;
 * @return {?proto.core.Date}
 */
proto.seller.RegisterRequest.prototype.getBirthDate = function() {
  return /** @type{?proto.core.Date} */ (
    jspb.Message.getWrapperField(this, core_date_pb.Date, 4));
};


/**
 * @param {?proto.core.Date|undefined} value
 * @return {!proto.seller.RegisterRequest} returns this
*/
proto.seller.RegisterRequest.prototype.setBirthDate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.clearBirthDate = function() {
  return this.setBirthDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.RegisterRequest.prototype.hasBirthDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional core.Money salary = 5;
 * @return {?proto.core.Money}
 */
proto.seller.RegisterRequest.prototype.getSalary = function() {
  return /** @type{?proto.core.Money} */ (
    jspb.Message.getWrapperField(this, core_money_pb.Money, 5));
};


/**
 * @param {?proto.core.Money|undefined} value
 * @return {!proto.seller.RegisterRequest} returns this
*/
proto.seller.RegisterRequest.prototype.setSalary = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.clearSalary = function() {
  return this.setSalary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.RegisterRequest.prototype.hasSalary = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string phone_number = 6;
 * @return {string}
 */
proto.seller.RegisterRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 place_of_work_id = 7;
 * @return {number}
 */
proto.seller.RegisterRequest.prototype.getPlaceOfWorkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setPlaceOfWorkId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional tradingpoint.PlaceOfWorkType place_of_work_type = 8;
 * @return {!proto.tradingpoint.PlaceOfWorkType}
 */
proto.seller.RegisterRequest.prototype.getPlaceOfWorkType = function() {
  return /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.tradingpoint.PlaceOfWorkType} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setPlaceOfWorkType = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional int32 trading_point_id = 9;
 * @return {number}
 */
proto.seller.RegisterRequest.prototype.getTradingPointId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setTradingPointId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional tradingpoint.TradingPointType trading_point_type = 10;
 * @return {!proto.tradingpoint.TradingPointType}
 */
proto.seller.RegisterRequest.prototype.getTradingPointType = function() {
  return /** @type {!proto.tradingpoint.TradingPointType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.tradingpoint.TradingPointType} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setTradingPointType = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.RegisterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.RegisterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.RegisterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.RegisterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.RegisterResponse}
 */
proto.seller.RegisterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.RegisterResponse;
  return proto.seller.RegisterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.RegisterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.RegisterResponse}
 */
proto.seller.RegisterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.RegisterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.RegisterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.RegisterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.RegisterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.seller.RegisterResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.RegisterResponse} returns this
 */
proto.seller.RegisterResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.ListByTradingPointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.ListByTradingPointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.ListByTradingPointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.ListByTradingPointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradingPointId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradingPointType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.ListByTradingPointRequest}
 */
proto.seller.ListByTradingPointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.ListByTradingPointRequest;
  return proto.seller.ListByTradingPointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.ListByTradingPointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.ListByTradingPointRequest}
 */
proto.seller.ListByTradingPointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradingPointId(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpoint.TradingPointType} */ (reader.readEnum());
      msg.setTradingPointType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.ListByTradingPointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.ListByTradingPointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.ListByTradingPointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.ListByTradingPointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradingPointId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTradingPointType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 trading_point_id = 1;
 * @return {number}
 */
proto.seller.ListByTradingPointRequest.prototype.getTradingPointId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.ListByTradingPointRequest} returns this
 */
proto.seller.ListByTradingPointRequest.prototype.setTradingPointId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional tradingpoint.TradingPointType trading_point_type = 2;
 * @return {!proto.tradingpoint.TradingPointType}
 */
proto.seller.ListByTradingPointRequest.prototype.getTradingPointType = function() {
  return /** @type {!proto.tradingpoint.TradingPointType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpoint.TradingPointType} value
 * @return {!proto.seller.ListByTradingPointRequest} returns this
 */
proto.seller.ListByTradingPointRequest.prototype.setTradingPointType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seller.ListByTradingPointResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.ListByTradingPointResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.ListByTradingPointResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.ListByTradingPointResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.ListByTradingPointResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sellerList: jspb.Message.toObjectList(msg.getSellerList(),
    proto.seller.Seller.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.ListByTradingPointResponse}
 */
proto.seller.ListByTradingPointResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.ListByTradingPointResponse;
  return proto.seller.ListByTradingPointResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.ListByTradingPointResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.ListByTradingPointResponse}
 */
proto.seller.ListByTradingPointResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.seller.Seller;
      reader.readMessage(value,proto.seller.Seller.deserializeBinaryFromReader);
      msg.addSeller(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.ListByTradingPointResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.ListByTradingPointResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.ListByTradingPointResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.ListByTradingPointResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSellerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.seller.Seller.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Seller seller = 1;
 * @return {!Array<!proto.seller.Seller>}
 */
proto.seller.ListByTradingPointResponse.prototype.getSellerList = function() {
  return /** @type{!Array<!proto.seller.Seller>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seller.Seller, 1));
};


/**
 * @param {!Array<!proto.seller.Seller>} value
 * @return {!proto.seller.ListByTradingPointResponse} returns this
*/
proto.seller.ListByTradingPointResponse.prototype.setSellerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.seller.Seller=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seller.Seller}
 */
proto.seller.ListByTradingPointResponse.prototype.addSeller = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.seller.Seller, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seller.ListByTradingPointResponse} returns this
 */
proto.seller.ListByTradingPointResponse.prototype.clearSellerList = function() {
  return this.setSellerList([]);
};


goog.object.extend(exports, proto.seller);
