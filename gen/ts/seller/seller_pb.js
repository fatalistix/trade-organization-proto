// source: seller/seller.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var core_money_pb = require('../core/money_pb.js');
goog.object.extend(proto, core_money_pb);
var core_date_pb = require('../core/date_pb.js');
goog.object.extend(proto, core_date_pb);
var tradingpoint_tradingpoint_pb = require('../tradingpoint/tradingpoint_pb.js');
goog.object.extend(proto, tradingpoint_tradingpoint_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.seller.ListRequest', null, global);
goog.exportSymbol('proto.seller.ListResponse', null, global);
goog.exportSymbol('proto.seller.NewWorksAt', null, global);
goog.exportSymbol('proto.seller.PlaceOfWork', null, global);
goog.exportSymbol('proto.seller.RegisterRequest', null, global);
goog.exportSymbol('proto.seller.RegisterResponse', null, global);
goog.exportSymbol('proto.seller.Seller', null, global);
goog.exportSymbol('proto.seller.SellerStatus', null, global);
goog.exportSymbol('proto.seller.TradingPoint', null, global);
goog.exportSymbol('proto.seller.UpdateRequest', null, global);
goog.exportSymbol('proto.seller.UpdateResponse', null, global);
goog.exportSymbol('proto.seller.WorksAt', null, global);
goog.exportSymbol('proto.seller.WorksAtFilterType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.Seller = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.Seller, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.Seller.displayName = 'proto.seller.Seller';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.WorksAt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.WorksAt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.WorksAt.displayName = 'proto.seller.WorksAt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.PlaceOfWork = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.PlaceOfWork, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.PlaceOfWork.displayName = 'proto.seller.PlaceOfWork';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.TradingPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.TradingPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.TradingPoint.displayName = 'proto.seller.TradingPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.RegisterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.RegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.RegisterRequest.displayName = 'proto.seller.RegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.RegisterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.RegisterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.RegisterResponse.displayName = 'proto.seller.RegisterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.ListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.ListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.ListRequest.displayName = 'proto.seller.ListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.ListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seller.ListResponse.repeatedFields_, null);
};
goog.inherits(proto.seller.ListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.ListResponse.displayName = 'proto.seller.ListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.UpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.UpdateRequest.displayName = 'proto.seller.UpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.NewWorksAt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.NewWorksAt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.NewWorksAt.displayName = 'proto.seller.NewWorksAt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seller.UpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seller.UpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seller.UpdateResponse.displayName = 'proto.seller.UpdateResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.Seller.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.Seller.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.Seller} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.Seller.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    firstName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    middleName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    birthDate: (f = msg.getBirthDate()) && core_date_pb.Date.toObject(includeInstance, f),
    salary: (f = msg.getSalary()) && core_money_pb.Money.toObject(includeInstance, f),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 8, ""),
    worksAt: (f = msg.getWorksAt()) && proto.seller.WorksAt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.Seller}
 */
proto.seller.Seller.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.Seller;
  return proto.seller.Seller.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.Seller} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.Seller}
 */
proto.seller.Seller.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.seller.SellerStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiddleName(value);
      break;
    case 6:
      var value = new core_date_pb.Date;
      reader.readMessage(value,core_date_pb.Date.deserializeBinaryFromReader);
      msg.setBirthDate(value);
      break;
    case 7:
      var value = new core_money_pb.Money;
      reader.readMessage(value,core_money_pb.Money.deserializeBinaryFromReader);
      msg.setSalary(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 9:
      var value = new proto.seller.WorksAt;
      reader.readMessage(value,proto.seller.WorksAt.deserializeBinaryFromReader);
      msg.setWorksAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.Seller.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.Seller.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.Seller} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.Seller.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMiddleName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBirthDate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      core_date_pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getSalary();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      core_money_pb.Money.serializeBinaryToWriter
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getWorksAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.seller.WorksAt.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.seller.Seller.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SellerStatus status = 2;
 * @return {!proto.seller.SellerStatus}
 */
proto.seller.Seller.prototype.getStatus = function() {
  return /** @type {!proto.seller.SellerStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.seller.SellerStatus} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string first_name = 3;
 * @return {string}
 */
proto.seller.Seller.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string last_name = 4;
 * @return {string}
 */
proto.seller.Seller.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string middle_name = 5;
 * @return {string}
 */
proto.seller.Seller.prototype.getMiddleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setMiddleName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional core.Date birth_date = 6;
 * @return {?proto.core.Date}
 */
proto.seller.Seller.prototype.getBirthDate = function() {
  return /** @type{?proto.core.Date} */ (
    jspb.Message.getWrapperField(this, core_date_pb.Date, 6));
};


/**
 * @param {?proto.core.Date|undefined} value
 * @return {!proto.seller.Seller} returns this
*/
proto.seller.Seller.prototype.setBirthDate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.clearBirthDate = function() {
  return this.setBirthDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.Seller.prototype.hasBirthDate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional core.Money salary = 7;
 * @return {?proto.core.Money}
 */
proto.seller.Seller.prototype.getSalary = function() {
  return /** @type{?proto.core.Money} */ (
    jspb.Message.getWrapperField(this, core_money_pb.Money, 7));
};


/**
 * @param {?proto.core.Money|undefined} value
 * @return {!proto.seller.Seller} returns this
*/
proto.seller.Seller.prototype.setSalary = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.clearSalary = function() {
  return this.setSalary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.Seller.prototype.hasSalary = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string phone_number = 8;
 * @return {string}
 */
proto.seller.Seller.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional WorksAt works_at = 9;
 * @return {?proto.seller.WorksAt}
 */
proto.seller.Seller.prototype.getWorksAt = function() {
  return /** @type{?proto.seller.WorksAt} */ (
    jspb.Message.getWrapperField(this, proto.seller.WorksAt, 9));
};


/**
 * @param {?proto.seller.WorksAt|undefined} value
 * @return {!proto.seller.Seller} returns this
*/
proto.seller.Seller.prototype.setWorksAt = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.Seller} returns this
 */
proto.seller.Seller.prototype.clearWorksAt = function() {
  return this.setWorksAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.Seller.prototype.hasWorksAt = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.WorksAt.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.WorksAt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.WorksAt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.WorksAt.toObject = function(includeInstance, msg) {
  var f, obj = {
    placeOfWork: (f = msg.getPlaceOfWork()) && proto.seller.PlaceOfWork.toObject(includeInstance, f),
    tradingPoint: (f = msg.getTradingPoint()) && proto.seller.TradingPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.WorksAt}
 */
proto.seller.WorksAt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.WorksAt;
  return proto.seller.WorksAt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.WorksAt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.WorksAt}
 */
proto.seller.WorksAt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.seller.PlaceOfWork;
      reader.readMessage(value,proto.seller.PlaceOfWork.deserializeBinaryFromReader);
      msg.setPlaceOfWork(value);
      break;
    case 2:
      var value = new proto.seller.TradingPoint;
      reader.readMessage(value,proto.seller.TradingPoint.deserializeBinaryFromReader);
      msg.setTradingPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.WorksAt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.WorksAt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.WorksAt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.WorksAt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlaceOfWork();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.seller.PlaceOfWork.serializeBinaryToWriter
    );
  }
  f = message.getTradingPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.seller.TradingPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlaceOfWork place_of_work = 1;
 * @return {?proto.seller.PlaceOfWork}
 */
proto.seller.WorksAt.prototype.getPlaceOfWork = function() {
  return /** @type{?proto.seller.PlaceOfWork} */ (
    jspb.Message.getWrapperField(this, proto.seller.PlaceOfWork, 1));
};


/**
 * @param {?proto.seller.PlaceOfWork|undefined} value
 * @return {!proto.seller.WorksAt} returns this
*/
proto.seller.WorksAt.prototype.setPlaceOfWork = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.WorksAt} returns this
 */
proto.seller.WorksAt.prototype.clearPlaceOfWork = function() {
  return this.setPlaceOfWork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.WorksAt.prototype.hasPlaceOfWork = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TradingPoint trading_point = 2;
 * @return {?proto.seller.TradingPoint}
 */
proto.seller.WorksAt.prototype.getTradingPoint = function() {
  return /** @type{?proto.seller.TradingPoint} */ (
    jspb.Message.getWrapperField(this, proto.seller.TradingPoint, 2));
};


/**
 * @param {?proto.seller.TradingPoint|undefined} value
 * @return {!proto.seller.WorksAt} returns this
*/
proto.seller.WorksAt.prototype.setTradingPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.WorksAt} returns this
 */
proto.seller.WorksAt.prototype.clearTradingPoint = function() {
  return this.setTradingPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.WorksAt.prototype.hasTradingPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.PlaceOfWork.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.PlaceOfWork.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.PlaceOfWork} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.PlaceOfWork.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.PlaceOfWork}
 */
proto.seller.PlaceOfWork.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.PlaceOfWork;
  return proto.seller.PlaceOfWork.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.PlaceOfWork} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.PlaceOfWork}
 */
proto.seller.PlaceOfWork.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.PlaceOfWork.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.PlaceOfWork.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.PlaceOfWork} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.PlaceOfWork.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.seller.PlaceOfWork.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.PlaceOfWork} returns this
 */
proto.seller.PlaceOfWork.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional tradingpoint.PlaceOfWorkType type = 2;
 * @return {!proto.tradingpoint.PlaceOfWorkType}
 */
proto.seller.PlaceOfWork.prototype.getType = function() {
  return /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpoint.PlaceOfWorkType} value
 * @return {!proto.seller.PlaceOfWork} returns this
 */
proto.seller.PlaceOfWork.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.TradingPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.TradingPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.TradingPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.TradingPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.TradingPoint}
 */
proto.seller.TradingPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.TradingPoint;
  return proto.seller.TradingPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.TradingPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.TradingPoint}
 */
proto.seller.TradingPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpoint.TradingPointType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.TradingPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.TradingPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.TradingPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.TradingPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.seller.TradingPoint.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.TradingPoint} returns this
 */
proto.seller.TradingPoint.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional tradingpoint.TradingPointType type = 2;
 * @return {!proto.tradingpoint.TradingPointType}
 */
proto.seller.TradingPoint.prototype.getType = function() {
  return /** @type {!proto.tradingpoint.TradingPointType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpoint.TradingPointType} value
 * @return {!proto.seller.TradingPoint} returns this
 */
proto.seller.TradingPoint.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.RegisterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.RegisterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.RegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.RegisterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    middleName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    birthDate: (f = msg.getBirthDate()) && core_date_pb.Date.toObject(includeInstance, f),
    salary: (f = msg.getSalary()) && core_money_pb.Money.toObject(includeInstance, f),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 6, ""),
    worksAt: (f = msg.getWorksAt()) && proto.seller.WorksAt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.RegisterRequest}
 */
proto.seller.RegisterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.RegisterRequest;
  return proto.seller.RegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.RegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.RegisterRequest}
 */
proto.seller.RegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiddleName(value);
      break;
    case 4:
      var value = new core_date_pb.Date;
      reader.readMessage(value,core_date_pb.Date.deserializeBinaryFromReader);
      msg.setBirthDate(value);
      break;
    case 5:
      var value = new core_money_pb.Money;
      reader.readMessage(value,core_money_pb.Money.deserializeBinaryFromReader);
      msg.setSalary(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 7:
      var value = new proto.seller.WorksAt;
      reader.readMessage(value,proto.seller.WorksAt.deserializeBinaryFromReader);
      msg.setWorksAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.RegisterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.RegisterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.RegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.RegisterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMiddleName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBirthDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      core_date_pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getSalary();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      core_money_pb.Money.serializeBinaryToWriter
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWorksAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.seller.WorksAt.serializeBinaryToWriter
    );
  }
};


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.seller.RegisterRequest.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.seller.RegisterRequest.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string middle_name = 3;
 * @return {string}
 */
proto.seller.RegisterRequest.prototype.getMiddleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setMiddleName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional core.Date birth_date = 4;
 * @return {?proto.core.Date}
 */
proto.seller.RegisterRequest.prototype.getBirthDate = function() {
  return /** @type{?proto.core.Date} */ (
    jspb.Message.getWrapperField(this, core_date_pb.Date, 4));
};


/**
 * @param {?proto.core.Date|undefined} value
 * @return {!proto.seller.RegisterRequest} returns this
*/
proto.seller.RegisterRequest.prototype.setBirthDate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.clearBirthDate = function() {
  return this.setBirthDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.RegisterRequest.prototype.hasBirthDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional core.Money salary = 5;
 * @return {?proto.core.Money}
 */
proto.seller.RegisterRequest.prototype.getSalary = function() {
  return /** @type{?proto.core.Money} */ (
    jspb.Message.getWrapperField(this, core_money_pb.Money, 5));
};


/**
 * @param {?proto.core.Money|undefined} value
 * @return {!proto.seller.RegisterRequest} returns this
*/
proto.seller.RegisterRequest.prototype.setSalary = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.clearSalary = function() {
  return this.setSalary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.RegisterRequest.prototype.hasSalary = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string phone_number = 6;
 * @return {string}
 */
proto.seller.RegisterRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional WorksAt works_at = 7;
 * @return {?proto.seller.WorksAt}
 */
proto.seller.RegisterRequest.prototype.getWorksAt = function() {
  return /** @type{?proto.seller.WorksAt} */ (
    jspb.Message.getWrapperField(this, proto.seller.WorksAt, 7));
};


/**
 * @param {?proto.seller.WorksAt|undefined} value
 * @return {!proto.seller.RegisterRequest} returns this
*/
proto.seller.RegisterRequest.prototype.setWorksAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.RegisterRequest} returns this
 */
proto.seller.RegisterRequest.prototype.clearWorksAt = function() {
  return this.setWorksAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.RegisterRequest.prototype.hasWorksAt = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.RegisterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.RegisterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.RegisterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.RegisterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.RegisterResponse}
 */
proto.seller.RegisterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.RegisterResponse;
  return proto.seller.RegisterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.RegisterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.RegisterResponse}
 */
proto.seller.RegisterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.RegisterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.RegisterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.RegisterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.RegisterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.seller.RegisterResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.RegisterResponse} returns this
 */
proto.seller.RegisterResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.ListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.ListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.ListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.ListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    worksAtFilter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tradingPointId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tradingPointType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    placeOfWorkId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    placeOfWorkType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    search: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.ListRequest}
 */
proto.seller.ListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.ListRequest;
  return proto.seller.ListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.ListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.ListRequest}
 */
proto.seller.ListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.seller.WorksAtFilterType} */ (reader.readEnum());
      msg.setWorksAtFilter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTradingPointId(value);
      break;
    case 3:
      var value = /** @type {!proto.tradingpoint.TradingPointType} */ (reader.readEnum());
      msg.setTradingPointType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlaceOfWorkId(value);
      break;
    case 5:
      var value = /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (reader.readEnum());
      msg.setPlaceOfWorkType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.ListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.ListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.ListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.ListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorksAtFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!proto.tradingpoint.TradingPointType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional WorksAtFilterType works_at_filter = 1;
 * @return {!proto.seller.WorksAtFilterType}
 */
proto.seller.ListRequest.prototype.getWorksAtFilter = function() {
  return /** @type {!proto.seller.WorksAtFilterType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.seller.WorksAtFilterType} value
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.setWorksAtFilter = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 trading_point_id = 2;
 * @return {number}
 */
proto.seller.ListRequest.prototype.getTradingPointId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.setTradingPointId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.clearTradingPointId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.ListRequest.prototype.hasTradingPointId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional tradingpoint.TradingPointType trading_point_type = 3;
 * @return {!proto.tradingpoint.TradingPointType}
 */
proto.seller.ListRequest.prototype.getTradingPointType = function() {
  return /** @type {!proto.tradingpoint.TradingPointType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.tradingpoint.TradingPointType} value
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.setTradingPointType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.clearTradingPointType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.ListRequest.prototype.hasTradingPointType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 place_of_work_id = 4;
 * @return {number}
 */
proto.seller.ListRequest.prototype.getPlaceOfWorkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.setPlaceOfWorkId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.clearPlaceOfWorkId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.ListRequest.prototype.hasPlaceOfWorkId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional tradingpoint.PlaceOfWorkType place_of_work_type = 5;
 * @return {!proto.tradingpoint.PlaceOfWorkType}
 */
proto.seller.ListRequest.prototype.getPlaceOfWorkType = function() {
  return /** @type {!proto.tradingpoint.PlaceOfWorkType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.tradingpoint.PlaceOfWorkType} value
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.setPlaceOfWorkType = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.clearPlaceOfWorkType = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.ListRequest.prototype.hasPlaceOfWorkType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string search = 6;
 * @return {string}
 */
proto.seller.ListRequest.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.setSearch = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seller.ListRequest} returns this
 */
proto.seller.ListRequest.prototype.clearSearch = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.ListRequest.prototype.hasSearch = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seller.ListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.ListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.ListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.ListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.ListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sellersList: jspb.Message.toObjectList(msg.getSellersList(),
    proto.seller.Seller.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.ListResponse}
 */
proto.seller.ListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.ListResponse;
  return proto.seller.ListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.ListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.ListResponse}
 */
proto.seller.ListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.seller.Seller;
      reader.readMessage(value,proto.seller.Seller.deserializeBinaryFromReader);
      msg.addSellers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.ListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.ListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.ListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.ListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSellersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.seller.Seller.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Seller sellers = 1;
 * @return {!Array<!proto.seller.Seller>}
 */
proto.seller.ListResponse.prototype.getSellersList = function() {
  return /** @type{!Array<!proto.seller.Seller>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seller.Seller, 1));
};


/**
 * @param {!Array<!proto.seller.Seller>} value
 * @return {!proto.seller.ListResponse} returns this
*/
proto.seller.ListResponse.prototype.setSellersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.seller.Seller=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seller.Seller}
 */
proto.seller.ListResponse.prototype.addSellers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.seller.Seller, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seller.ListResponse} returns this
 */
proto.seller.ListResponse.prototype.clearSellersList = function() {
  return this.setSellersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.UpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.UpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.UpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.UpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    firstName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    middleName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    birthDate: (f = msg.getBirthDate()) && core_date_pb.Date.toObject(includeInstance, f),
    salary: (f = msg.getSalary()) && core_money_pb.Money.toObject(includeInstance, f),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 7, ""),
    worksAt: (f = msg.getWorksAt()) && proto.seller.NewWorksAt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.UpdateRequest}
 */
proto.seller.UpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.UpdateRequest;
  return proto.seller.UpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.UpdateRequest}
 */
proto.seller.UpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiddleName(value);
      break;
    case 5:
      var value = new core_date_pb.Date;
      reader.readMessage(value,core_date_pb.Date.deserializeBinaryFromReader);
      msg.setBirthDate(value);
      break;
    case 6:
      var value = new core_money_pb.Money;
      reader.readMessage(value,core_money_pb.Money.deserializeBinaryFromReader);
      msg.setSalary(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 8:
      var value = new proto.seller.NewWorksAt;
      reader.readMessage(value,proto.seller.NewWorksAt.deserializeBinaryFromReader);
      msg.setWorksAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.UpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.UpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.UpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBirthDate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      core_date_pb.Date.serializeBinaryToWriter
    );
  }
  f = message.getSalary();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      core_money_pb.Money.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getWorksAt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.seller.NewWorksAt.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.seller.UpdateRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string first_name = 2;
 * @return {string}
 */
proto.seller.UpdateRequest.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.setFirstName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.clearFirstName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.UpdateRequest.prototype.hasFirstName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string last_name = 3;
 * @return {string}
 */
proto.seller.UpdateRequest.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.setLastName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.clearLastName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.UpdateRequest.prototype.hasLastName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string middle_name = 4;
 * @return {string}
 */
proto.seller.UpdateRequest.prototype.getMiddleName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.setMiddleName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.clearMiddleName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.UpdateRequest.prototype.hasMiddleName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional core.Date birth_date = 5;
 * @return {?proto.core.Date}
 */
proto.seller.UpdateRequest.prototype.getBirthDate = function() {
  return /** @type{?proto.core.Date} */ (
    jspb.Message.getWrapperField(this, core_date_pb.Date, 5));
};


/**
 * @param {?proto.core.Date|undefined} value
 * @return {!proto.seller.UpdateRequest} returns this
*/
proto.seller.UpdateRequest.prototype.setBirthDate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.clearBirthDate = function() {
  return this.setBirthDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.UpdateRequest.prototype.hasBirthDate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional core.Money salary = 6;
 * @return {?proto.core.Money}
 */
proto.seller.UpdateRequest.prototype.getSalary = function() {
  return /** @type{?proto.core.Money} */ (
    jspb.Message.getWrapperField(this, core_money_pb.Money, 6));
};


/**
 * @param {?proto.core.Money|undefined} value
 * @return {!proto.seller.UpdateRequest} returns this
*/
proto.seller.UpdateRequest.prototype.setSalary = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.clearSalary = function() {
  return this.setSalary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.UpdateRequest.prototype.hasSalary = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string phone_number = 7;
 * @return {string}
 */
proto.seller.UpdateRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.clearPhoneNumber = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.UpdateRequest.prototype.hasPhoneNumber = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional NewWorksAt works_at = 8;
 * @return {?proto.seller.NewWorksAt}
 */
proto.seller.UpdateRequest.prototype.getWorksAt = function() {
  return /** @type{?proto.seller.NewWorksAt} */ (
    jspb.Message.getWrapperField(this, proto.seller.NewWorksAt, 8));
};


/**
 * @param {?proto.seller.NewWorksAt|undefined} value
 * @return {!proto.seller.UpdateRequest} returns this
*/
proto.seller.UpdateRequest.prototype.setWorksAt = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.UpdateRequest} returns this
 */
proto.seller.UpdateRequest.prototype.clearWorksAt = function() {
  return this.setWorksAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.UpdateRequest.prototype.hasWorksAt = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.NewWorksAt.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.NewWorksAt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.NewWorksAt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.NewWorksAt.toObject = function(includeInstance, msg) {
  var f, obj = {
    worksAt: (f = msg.getWorksAt()) && proto.seller.WorksAt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.NewWorksAt}
 */
proto.seller.NewWorksAt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.NewWorksAt;
  return proto.seller.NewWorksAt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.NewWorksAt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.NewWorksAt}
 */
proto.seller.NewWorksAt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.seller.WorksAt;
      reader.readMessage(value,proto.seller.WorksAt.deserializeBinaryFromReader);
      msg.setWorksAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.NewWorksAt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.NewWorksAt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.NewWorksAt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.NewWorksAt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorksAt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.seller.WorksAt.serializeBinaryToWriter
    );
  }
};


/**
 * optional WorksAt works_at = 1;
 * @return {?proto.seller.WorksAt}
 */
proto.seller.NewWorksAt.prototype.getWorksAt = function() {
  return /** @type{?proto.seller.WorksAt} */ (
    jspb.Message.getWrapperField(this, proto.seller.WorksAt, 1));
};


/**
 * @param {?proto.seller.WorksAt|undefined} value
 * @return {!proto.seller.NewWorksAt} returns this
*/
proto.seller.NewWorksAt.prototype.setWorksAt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seller.NewWorksAt} returns this
 */
proto.seller.NewWorksAt.prototype.clearWorksAt = function() {
  return this.setWorksAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seller.NewWorksAt.prototype.hasWorksAt = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seller.UpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.seller.UpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seller.UpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.UpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seller.UpdateResponse}
 */
proto.seller.UpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seller.UpdateResponse;
  return proto.seller.UpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seller.UpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seller.UpdateResponse}
 */
proto.seller.UpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seller.UpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seller.UpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seller.UpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seller.UpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.seller.UpdateResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seller.UpdateResponse} returns this
 */
proto.seller.UpdateResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.seller.SellerStatus = {
  SELLER_STATUS_WORKING: 0,
  SELLER_STATUS_NOT_WORKING: 1
};

/**
 * @enum {number}
 */
proto.seller.WorksAtFilterType = {
  WORKS_AT_FILTER_TYPE_ALL: 0,
  WORKS_AT_FILTER_TYPE_ONLY_NULL: 1,
  WORKS_AT_FILTER_TYPE_ONLY_NOT_NULL: 2
};

goog.object.extend(exports, proto.seller);
